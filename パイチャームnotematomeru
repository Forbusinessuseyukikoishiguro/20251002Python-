# はじめに

こんにちは、Python先生です。😊
新人エンジニア向けに、**PyCharmでのデバッグ方法**を「実践ステップ＋よくあるエラーと対処」を中心に **やさしく順を追って** 解説します。
まずは準備 → 実際のデバッグ操作 → 具体的なバグ修正の流れ → よくあるエラーと対処、という順番で進めます。手元のコードがあれば同じ手順で一緒に確認できますよ！

---

# 1. PyCharmの準備（まずここをチェック）

1. **Python Interpreter（仮想環境）が設定されているか**

   * Windows/Linux: `File > Settings > Project > Python Interpreter`
     macOS: `PyCharm > Preferences > Project > Python Interpreter`
   * 仮想環境（venv/conda）を使うのが推奨。パッケージはその環境に入れてください。
   * ターミナルで `python -m pip install <パッケージ>` を使うと環境を間違えにくいです。

2. **Run/Debug構成を確認**

   * 右上の構成（Script path / Module name / Parameters / Working directory）を確認。
   * `Working directory` がプロジェクトルートになっているかチェック（相対パスのファイル参照ミスを防ぐ）。

3. **ソースのルート設定**

   * 必要なら該当フォルダを右クリック > `Mark Directory as > Sources Root`（import問題の対策）。

---

# 2. 基本的なデバッグ操作（ステップバイステップ）

### 1) ブレークポイントを置く

* 行番号左のガター（縁）をクリックするだけでOK（赤い丸が表示）。
* 右クリックで「条件付きブレークポイント（Condition）」や「コンソールにログを出す（Log message）」が設定できます。

### 2) デバッグを開始

* ツールバーの虫マーク（Debug）をクリックするか、メニュー `Run > Debug` を選択。
* （ショートカットは Keymap に依るので、うまくいかないときはメニューから実行してください。）

### 3) 実行中に使う主な操作

* **Resume / Continue**: 再開（次のブレークポイントまで進む）
* **Step Over**（次の行へ、関数呼び出しは中に入らない）
* **Step Into**（関数内へ入る）
* **Step Out**（現在の関数を抜ける）
* **Run to Cursor / Execute to Cursor**（カーソルまで実行）
* **Evaluate Expression**（変数や式をその場で評価）
* **Watches**（監視したい式を登録して変化を見る）
* **Variables pane / Inline values**（変数の現在値を確認）

> ヒント：例外で止めたいなら「View Breakpoints」（ブレークポイントダイアログ）で **"Any Exception"** や特定の例外（`IndexError` など）を登録しておくと、例外が発生した瞬間に止められます。

---

# 3. 実践ワークフロー — 具体例で学ぶ（例：IndexErrorを直す）

次のような `sample.py` があったとします。

```python
# sample.py
def find_max(nums):
    max_val = nums[0]
    for n in nums:
        if n > max_val:
            max_val = n
    return max_val

def main():
    numbers = []
    print(find_max(numbers))

if __name__ == "__main__":
    main()
```

**症状**：実行すると `IndexError: list index out of range` が出る。

**デバッグ手順（ステップ）**

1. `main` の `print(find_max(numbers))` 行にブレークポイントを置く。
2. Debug モードで実行。
3. 停止したら `numbers` の中身を Variables パネルで見る → `[]`（空のリスト）であることを確認。
4. `Step Into` して `find_max` に入る。最初の行 `nums[0]` で例外が出るのが見えるはず。
5. 原因：空リストを処理しているため `nums[0]` が参照できない。
6. 修正案（例）：

```python
def find_max(nums):
    if not nums:
        raise ValueError("empty list passed to find_max")
    max_val = nums[0]
    ...
```

7. 修正後、再度 Debug または Run して挙動を確認。

---

# 4. よくあるPythonエラー と その対処（短くまとまて）

各エラーの **原因** と **即効Fix** を書きます。

1. **SyntaxError**

   * 原因：コロン（:）忘れ、括弧不足、インデント不整合など。
   * 対処：エラーメッセージの行を見て構文を直す。PyCharmは赤波線を表示。

2. **IndentationError**

   * 原因：タブ・スペース混在やインデント深さが不正。
   * 対処：ファイル全体のインデントを統一（Spaces 推奨、4スペース）。`Edit > Convert Indents`。

3. **NameError**

   * 原因：変数名のタイプミス、スコープ外参照。
   * 対処：変数名の綴り確認、定義の順序、グローバル/ローカル確認。

4. **TypeError**

   * 原因：期待する型と違うオブジェクトを渡した（例: int + str）。
   * 対処：`print(type(x))` やデバッガの変数確認。適切な変換 `int()` 等を行う。

5. **AttributeError**

   * 原因：オブジェクトにない属性やメソッドを呼んでいる。
   * 対処：`dir(obj)` で属性確認、型をチェック。

6. **IndexError / KeyError**

   * 原因：リストの範囲外アクセス、辞書に無いキー参照。
   * 対処：長さチェック、`in` 演算子、`.get()` の利用（辞書）。

7. **ModuleNotFoundError / ImportError**

   * 原因：モジュール未インストール、違う環境で実行、パス設定ミス。
   * 対処：正しい interpreter を選ぶ、`pip install`、`python -m pip install` を使う。

8. **FileNotFoundError**

   * 原因：ファイルパスが間違い、Working directory の違い。
   * 対処：絶対パスを一時的に使うか、Run構成の Working directory を確認。

9. **ZeroDivisionError**

   * 原因：0で割っている。
   * 対処：除算前にゼロチェック or try/exceptで処理。

10. **PermissionError**

    * 原因：ファイル/ディレクトリに権限がない。
    * 対処：権限を変更、適切な書き込み先にする。

---

# 5. PyCharm特有のトラブルと対処

* **ブレークポイントがヒットしない**

  * Debug ではなく Run をしている可能性 → Debugで起動する。
  * 実行中のプロセスとファイルのソースが違う（例: インストール済みパッケージの別ソースを編集している） → 正しいスクリプトを編集しているか確認。
  * サブプロセスで動く場合は「Attach to subprocess」オプションを有効にする（ブレークポイント設定ダイアログで）。

* **パッケージが見つからない（ModuleNotFoundError）**

  * PyCharmのInterpreterが想定のvenvを指しているか確認。
  * Terminalで `which python`（Windowsは `where python`）や `pip list` を確認。

* **テスト（pytest/unittest）でうまくデバッグできない**

  * Run/Debug構成で `Python tests` を選ぶ、またはテストファイルを右クリックして `Debug` を選択。

---

# 6. 便利なデバッグテクニック・ベストプラクティス

* **ログを活用する**：`print` より `logging` を使う（後で詳細ログレベルで切り替えられる）。

  ```python
  import logging
  logging.basicConfig(level=logging.DEBUG)
  logging.debug("変数x=%s", x)
  ```
* **小さなテストケースに切り出す**：関数単位で再現できる最小ケースを作る。
* **条件付きブレークポイント**：特定条件でのみ止めたい時に便利（大量ループで効率的）。
* **Evaluateで即時実行**：デバッガの「Evaluate Expression」で任意の式を評価・実行できる（副作用に注意）。
* **pdb / ipdb の併用**：外部や軽量デバッグが必要なら `import pdb; pdb.set_trace()` を挿入して実行する。
* **Unit Test を作る**：バグ修正後にテストを追加して再発を防ぐ。

---

# 7. よく使うショートカット（参考）

> キーマップはユーザー設定で変わるので、合わない場合はメニューから同機能を探してください。

* ブレークポイント切替：`Ctrl + F8`（Windows/Linux） / `⌘ + F8`（mac）
* Debug 実行：`Shift + F9`（Windows/Linux）
* Step Over：`F8`
* Step Into：`F7`
* Step Out：`Shift + F8`
* Resume：`F9`
* Evaluate Expression：デバッグウィンドウのボタンから

---

# 8. すぐ使えるチェックリスト（デバッグ前に確認）

* [ ] Interpreter は正しい環境か？
* [ ] 必要なパッケージはインストール済みか？
* [ ] Run構成の Working directory は正しいか？
* [ ] ブレークポイントは置いたか？（条件がある場合は正しい式か）
* [ ] 再現手順を最小化できるか（小さなスクリプトで再現）

---

# 終わりに

ここまでで基本的な流れと代表的なエラー対処はカバーできたと思います。
もしよければ、**実際のあなたのコード（該当ファイル）をここに貼って**くれれば、私がこの手順でどこにブレークポイントを置くか、どこを直すかを具体的に示します。
急いでいる時や、どの修正でいいか迷っている時も手伝います — 気軽にどうぞ！✨
いい質問！😊
`Evaluate Expression` の意味と、PyCharm での使い方（実際の操作）と **ショートカット／キー割り当ての変更方法** を新人向けに丁寧にまとめますね。

# Evaluate Expression の意味（かんたん）

* デバッグ中に「その場で任意の式やコードを評価（実行）して結果を確認」する機能です。
* 一回だけ式を評価して結果を見たいときに使います（例：`len(my_list)`／`user.is_active()`）。
* 必要なら **変数を書き換えたり（`my_list.append(1)`）副作用のある処理を実行**することもできます — ※副作用に注意。

---

# 使い方：ステップバイステップ

1. **デバッグで一時停止**（ブレークポイントに到達）させる。
2. Debug ツールウィンドウ（下部）にある **Evaluate Expression** ボタン（電卓っぽいアイコン）をクリックする — またはショートカットを使う。

   * デフォルトのショートカット：**Windows/Linux: `Alt + F8`**, **macOS: `Option(⌥) + F8`**。
   * （ノートPCで動作しない時は `Fn` キーの影響を確認）
3. ダイアログの入力欄に評価したい式を入力して、**Evaluate**（評価）ボタンを押す。

   * 例：`len(nums)` → 結果が表示される。
4. もし「複数行の文（代入など）」を実行したい場合は、**"Code fragment"（または同等のチェック）** を有効にし、複数行のPythonコードを入力して実行できる（例：`nums.append(1)`）。
5. 「Evaluate in Console（または Execute in Console）」を使うと、式をデバッグコンソールで実行してより対話的に使えます（だんだん複雑な操作をしたいときに便利）。

---

# 実例（短い流れ）

例えば `find_max(nums)` をデバッグ中に一時停止しているとします。

* Evaluate に `nums` を入れて Evaluate → `[]`（空リスト）と返る → 原因が分かる。
* さらに `len(nums)` → `0`（確認）
* 状態を変更して試したい → `nums.append(10)`（Code fragment にチェックして実行） → その後 `len(nums)` を再評価して `1` になっていることを確認。
  ※この変更はプログラムの実行状態を変えるので注意。

---

# 「Watches」や「Debug Console」との違い

* **Evaluate Expression**：一時的・都度評価。対話的に試すのに便利。
* **Watches**：登録しておくとステップごとに自動で再評価してくれる（継続的に値を追いたいとき）。
* **Debug Console**：対話的なREPL。長い操作や複数コマンドを順に実行したいときに使う。Evaluate から「実行をコンソールに送る」ことも可能。

---

# ショートカットが効かない／変更したいとき（Keymap の設定）

1. メニューを開く

   * Windows/Linux: `File > Settings`
   * macOS: `PyCharm > Preferences`
2. `Keymap` を選択（左サイド）
3. 右上の検索ボックスに `Evaluate` と入力 → `Evaluate Expression` アクションが表示される。
4. そのアクションを**右クリック > Add Keyboard Shortcut** を選ぶ。

   * 新しいキーを入力（例：`Alt+F8`）→ OK。
   * 既存と競合が出たら警告が出るので、競合先を確認して上書きするか別のキーにする。
5. `Apply` → `OK` で保存。
6. 必要なら同じ画面で `Step Over` / `Step Into` / `Resume` 等も検索して別キーに変更できます。

補足：Keymap のプリセット（`Default`, `Visual Studio`, `Eclipse` など）を切り替えれば、慣れたIDE風のキー配置にすることもできます。

---

# トラブルシューティング & 注意点（新人向けのやさしい注意）

* **Alt+F8 が効かないとき**：OSやノートPCのFnキー設定で機能キーがロックされている場合があります（`Fn`＋`F8`など）。Keymap で別キーに割り当てると確実です。
* **評価で状態が変わったら復元されない**：Evaluate で実行した変更はそのセッションに影響します。予期せぬ副作用が出ることがあるので、本番データやファイル操作は注意。
* **式の構文エラー**：式は Python の式（expression）です。代入は通常 statement なので、代入したければ「Code fragment（複数行実行）」を使う。
* **長い処理は避ける**：重い処理や長時間かかる外部呼び出しは Evaluate でやるとデバッグが遅くなることがあります。

---

# まとめ（短く）

* `Evaluate Expression` は「デバッグ中に式をその場で評価する」ための非常に便利なツール。
* `Alt + F8`（Win/Linux） / `Option + F8`（mac）がデフォルト。効かないときは `File > Settings > Keymap` で変更できる。
* 一度に値を確認したい、ちょっと実験したい、という場面で積極的に使おう。ただし**副作用**には注意。

必要なら、あなたのPyCharmのスクリーンショット（デバッグ画面）や、試してみたい短いコードを貼ってください。どこをクリックして何を入力するか、実際に手取り足取り案内しますよ！🔧✨
すごくいい質問です！😊
「**Step Into（ステップイン）**」って最初はちょっと分かりづらいですよね。
でも一度イメージがつかめると、**関数の中をのぞいて動きを理解する最強のデバッグ技**になります。

---

# 🐍 やさしい説明：「Step系」ボタンの意味まとめ

まず、デバッグで止まったとき（ブレークポイントで一時停止中）に使う主な操作は3つあります👇

| 操作           | 英語名            | PyCharmショートカット（Win） | 何をする？                | 例えで言うと |
| ------------ | -------------- | ------------------- | -------------------- | ------ |
| ▶️ Step Over | **F8**         | 次の行へ進む（関数の中には入らない）  | 「今の行をまとめて実行して、次の行へ」  |        |
| 🔽 Step Into | **F7**         | 関数の中へ入って1行ずつ見ていく    | 「関数の中をのぞいて中身を追う」     |        |
| 🔼 Step Out  | **Shift + F8** | 今の関数の実行を終えて元の場所に戻る  | 「関数の中から抜けて上の呼び出しに戻る」 |        |

---

# 🧩 実例で見る：「Step Into」って何をするの？

以下の簡単なコードを例にします👇

```python
def add(a, b):
    result = a + b
    return result

def main():
    x = 3
    y = 5
    total = add(x, y)
    print(total)

main()
```

---

## 🪄 ステップ操作の流れ

1️⃣ **ブレークポイントを置く**

* 行番号左の灰色の縁をクリックして赤い丸をつけます（例えば `total = add(x, y)` の行）。

2️⃣ **Debug 実行（虫マーク）**

* 実行が止まったら、下にデバッグ画面が開きます。
  → 現在止まっている行が黄色にハイライトされているはずです。

3️⃣ **ここで「Step Over（F8）」を押すと**

* `add(x, y)` 関数は中身をスキップして**一気に結果を返し**ます。
* つまり「addがどう動くか」は見えません。
  → 結果はすぐ `total = 8` になります。

4️⃣ **「Step Into（F7）」を押すと**

* `add(x, y)` の中に**入ります**。
* 今度は `def add(a, b)` の1行目にジャンプして止まります！
* ここで `a=3, b=5` という値がデバッガに表示されます。
* 次に `Step Over (F8)` を押すと `result = a + b` が実行され、`result=8` が確認できます。
* さらに `Step Over` → `return result` → 関数が終了して、再び `main()` の `total = add(x, y)` に戻ります。

5️⃣ **関数の中から早く抜けたいときは**

* `Step Out（Shift + F8）` を押すと関数の残りを一気に実行して元の関数に戻ります。

---

# 🎨 イメージでたとえると…

たとえば「**お弁当箱の中身を見るかどうか**」で考えるとわかりやすいです🍱

| 操作            | たとえ                          |
| ------------- | ---------------------------- |
| **Step Over** | 「お弁当をそのまま食べる（中身の調理過程は見ない）」   |
| **Step Into** | 「お弁当のフタを開けて、どんな材料で作ってるか中を確認」 |
| **Step Out**  | 「見終わったからフタを閉じて、外に戻る」         |

---

# 💡 練習のコツ（初心者向け）

✅ Step Into（F7）を押すたびに、「関数の定義の中に入る」イメージを持つ。
✅ Step Over（F8）は「関数の中までは見ないで一気に進める」。
✅ Step Out（Shift+F8）は「もう中は見なくていいから戻る」。

これを繰り返すと、関数の動きが **1行ずつ見える** ようになります！

---

# 🔧 もしPyCharmで分からなくなったら

* **ツールチップを確認**：各ボタンの上にマウスを置くと「Step Over」「Step Into」と説明が出ます。
* **デバッグウィンドウ**に現在の行が黄色で表示されるので、「今どこにいるか」を常に確認。
* **変数タブ（Variables）**で値をリアルタイムでチェック。
* **Call Stack** タブを見ると、「いまどの関数の中か」が一覧で見える。

---

# ✨ まとめ

| 操作        | 意味                | ショートカット    |
| --------- | ----------------- | ---------- |
| Step Over | 関数を中に入らず実行して次へ    | F8         |
| Step Into | 関数の中に入って処理を1行ずつ確認 | F7         |
| Step Out  | 関数の中から外へ戻る        | Shift + F8 |
| Resume    | 次のブレークポイントまで進む    | F9         |

---

もしよければ、あなたが今デバッグしたい**具体的なコード**を貼ってください。
どこで「Step Into」を押すと中に入れるか、画像なしでも手順を一行ずつ説明します🐍💡
とても良い質問です🌸✨
新人エンジニアさんがつまずきやすい「`break` 文」と「`logging`（ログ出力）」は、**デバッグ**の理解を深めるうえでめちゃくちゃ大事なポイントです。
やさしく順番に、**実例つきでステップバイステップ**で説明しますね！

---

## 🧩 ① `break`文とは？

`break` は、**ループ（for / while）を途中で止める命令**です。
「もうこれ以上繰り返さなくていい」となったときに使います。

---

### 🔹 基本の形

```python
for i in range(10):
    if i == 5:
        break  # ループを途中で止める
    print(i)

print("終了")
```

### 💡 実行結果

```
0
1
2
3
4
終了
```

🟢 `i == 5` になった瞬間、`break` が実行されてループを中断。
つまり「forのくり返しの外」に出ます。

---

### 🔹 while文でも同じ

```python
count = 0
while True:  # 無限ループ
    print(count)
    count += 1
    if count == 3:
        break

print("ループ終了")
```

💡 `count == 3` になったとき `break` で抜ける → 無限ループ防止にも使えます。

---

### 🔹 よくある新人エラー（あるある）

| ミス例                      | 原因                    | 対処                          |
| ------------------------ | --------------------- | --------------------------- |
| `break` が効かない            | `if` の条件が間違っている       | printで条件を確認                 |
| ループが止まらない                | `while True` で抜け条件がない | `break` の場所を確認              |
| `break` outside loop エラー | ループの外で使ってる            | `for` / `while` の中でしか使えません！ |

---

## 🪄 デバッグで確認してみよう

PyCharmで、

* `if i == 5:` の行に**ブレークポイント**を置く
* デバッグ開始（Shift + F9）
* Step Over（F8）で1行ずつ実行してみる

すると、

* 変数 `i` が `0→1→2→3→4→5` と変化
* `break` に到達したらループを抜けて `print("終了")` へジャンプ

こうやって「どこでループが止まるか」を目で確認できます👀

---

## 🧾 ② `logging` モジュールとは？

`logging` は「プログラムの中で何が起きたか」を記録する**ログ出力ツール**です。
`print()` の上位版で、
✅ いつ
✅ どこで
✅ どんなレベルのメッセージ（情報／警告／エラー）
を自動で記録できます。

---

### 🔹 基本の使い方

```python
import logging

logging.basicConfig(level=logging.INFO)

for i in range(10):
    if i == 5:
        logging.warning("iが5になりました。ループを中断します。")
        break
    logging.info(f"現在のi: {i}")
```

---

### 💡 出力結果（コンソール）

```
INFO:root:現在のi: 0
INFO:root:現在のi: 1
INFO:root:現在のi: 2
INFO:root:現在のi: 3
INFO:root:現在のi: 4
WARNING:root:iが5になりました。ループを中断します。
```

🟢 `INFO` は普通の進捗メッセージ
🟡 `WARNING` は注意メッセージ
ほかに `DEBUG`, `ERROR`, `CRITICAL` もあります。

---

### 🔹 よく使うログレベル

| レベル名       | 意味          | 例           |
| ---------- | ----------- | ----------- |
| `DEBUG`    | 開発中の詳細情報    | 変数の中身を確認したい |
| `INFO`     | 通常の動作メッセージ  | 処理の開始・終了など  |
| `WARNING`  | 注意（でも動作は続く） | 入力がおかしいかも？  |
| `ERROR`    | エラー（異常発生）   | ファイルが開けないなど |
| `CRITICAL` | 致命的エラー      | プログラム停止レベル  |

---

### 🔹 ログをファイルに保存する（おすすめ💾）

```python
import logging

logging.basicConfig(
    filename='debug.log',  # ファイル名
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s'
)

for i in range(10):
    logging.debug(f"ループカウント: {i}")
    if i == 5:
        logging.warning("iが5になったのでbreakします")
        break
```

💡 出力ファイル `debug.log` に以下のように保存されます：

```
2025-10-07 09:10:23,456 [DEBUG] ループカウント: 0
2025-10-07 09:10:23,457 [DEBUG] ループカウント: 1
...
2025-10-07 09:10:23,462 [WARNING] iが5になったのでbreakします
```

---

## 🧠 break × logging の組み合わせ（実践例）

```python
import logging

logging.basicConfig(level=logging.INFO)

def find_number(nums, target):
    for n in nums:
        if n == target:
            logging.info(f"{target} を見つけました！")
            break
        logging.debug(f"チェック中: {n}")
    else:
        logging.warning(f"{target} は見つかりませんでした。")

find_number([1, 3, 5, 7, 9], 5)
```

💡 **結果：**

```
INFO:root:5 を見つけました！
```

🧩 ポイント：

* `for ... else` を使うと、`break` しなかったときだけ `else` が動く。
* デバッグで `logging` を入れておくと、後から「どこまで処理が進んだか」が一目でわかります！

---

## 🎓 まとめ

| 用語                            | 意味            | よく使う場面          |
| ----------------------------- | ------------- | --------------- |
| `break`                       | ループを途中で抜ける    | 条件が満たされたら止めたいとき |
| `logging`                     | プログラムの動きを記録する | デバッグ・運用時の確認     |
| `Step Over`（F8）               | 次の行へ進む        | 関数の中に入らない       |
| `Step Into`（F7）               | 関数の中に入る       | 詳しく確認したい時       |
| `Evaluate Expression`（Alt+F8） | その場で値を確認      | デバッグ中の確認        |

---

もしよければ、
あなたの「今デバッグしたいコード」や「breakを入れてもうまく止まらない例」を貼ってもらえますか？👀
PyCharmのどこをクリックして確認すればいいか、画面操作込みで**やさしく一行ずつ**案内します💡
