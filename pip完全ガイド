pipとモジュールについて、実践的なコードで説明しますね！

# ==========================================================
# pip完全ガイド - 新人エンジニア向け
# ==========================================================

"""
【pipとは？】

簡単に言うと：
  Pythonのパッケージ（ライブラリ）をインストールするツール
  「ピップ」と読む

正式名称：
  pip = "Pip Installs Packages" の略

役割：
  - 外部のパッケージをダウンロード＆インストール
  - インストール済みパッケージの管理
  - パッケージのアップデート
  - パッケージのアンインストール
"""

# ==========================================================
# 【1】pipの基本コマンド（ターミナルで実行）
# ==========================================================

print("=" * 70)
print("【1】pipの基本コマンド")
print("=" * 70)

basic_commands = """
■ パッケージをインストール
  pip install パッケージ名

  例：
  pip install requests          # requestsパッケージをインストール
  pip install numpy             # numpyをインストール
  pip install pandas            # pandasをインストール

■ 複数のパッケージを同時にインストール
  pip install requests numpy pandas

■ 特定のバージョンをインストール
  pip install requests==2.28.0  # バージョン2.28.0を指定
  pip install numpy>=1.20.0     # 1.20.0以上をインストール
  pip install pandas<2.0.0      # 2.0.0未満をインストール

■ インストール済みパッケージの一覧
  pip list                      # すべてのパッケージ
  pip list --outdated           # 更新可能なパッケージ

■ パッケージの詳細情報を表示
  pip show requests             # requestsの情報を表示

■ パッケージをアップデート
  pip install --upgrade requests     # 最新版にアップデート
  pip install -U requests            # -U は --upgrade の短縮形

■ パッケージをアンインストール
  pip uninstall requests        # requestsを削除

■ pipの自身をアップデート
  pip install --upgrade pip     # pip自体を最新版に
  python -m pip install --upgrade pip  # より確実な方法
"""

print(basic_commands)

# ==========================================================
# 【2】requirements.txt - プロジェクトの依存関係管理
# ==========================================================

print("\n" + "=" * 70)
print("【2】requirements.txt - 超重要！")
print("=" * 70)

requirements_explanation = """
■ requirements.txt とは？
  プロジェクトで使うパッケージのリストを書いたファイル
  チーム開発や本番環境で必須！

■ なぜ必要？
  ✅ チームで同じパッケージ環境を共有できる
  ✅ 本番サーバーに簡単にデプロイできる
  ✅ パッケージのバージョン管理ができる
  ✅ 他の人がプロジェクトを再現できる

■ requirements.txt の例：
-----------------------------------------------------------
# requirements.txt の内容

# Webスクレイピング
requests==2.28.1
beautifulsoup4==4.11.1

# データ分析
numpy==1.24.0
pandas==1.5.3
matplotlib==3.7.0

# Web開発
django>=4.0.0,<5.0.0
flask==2.3.0

# テスト
pytest==7.2.0
-----------------------------------------------------------

■ requirements.txt の作り方：
  # 現在の環境のパッケージ一覧を出力
  pip freeze > requirements.txt

■ requirements.txt からインストール：
  # ファイルに書かれたすべてのパッケージをインストール
  pip install -r requirements.txt
"""

print(requirements_explanation)

# ==========================================================
# 【3】実際にpipを使ってみる（Pythonコード内から）
# ==========================================================

print("\n" + "=" * 70)
print("【3】Pythonコード内でパッケージ情報を取得")
print("=" * 70)

# 標準ライブラリをインポート（pipなしで使える）
import sys          # システム関連
import subprocess   # 外部コマンド実行
import importlib    # モジュールのインポート関連

# インストール済みパッケージの確認
try:
    import pkg_resources  # パッケージ情報を取得するモジュール
    
    print("\n【インストール済みパッケージの一部】")
    installed_packages = pkg_resources.working_set  # インストール済みパッケージ取得
    packages_list = sorted([f"{pkg.key}=={pkg.version}" for pkg in installed_packages])
    
    # 最初の10個だけ表示
    for i, package in enumerate(packages_list[:10], 1):
        print(f"  {i}. {package}")
    
    print(f"\n  ... 他 {len(packages_list) - 10} 個のパッケージ")
    
except ImportError:
    print("pkg_resources が利用できません")

# Pythonのバージョン情報
print(f"\n【Python環境情報】")
print(f"  Pythonバージョン: {sys.version.split()[0]}")
print(f"  実行パス: {sys.executable}")

# ==========================================================
# 【4】よく使う有名なパッケージ紹介
# ==========================================================

print("\n" + "=" * 70)
print("【4】よく使う有名なパッケージ")
print("=" * 70)

popular_packages = """
■ データ分析・科学計算
  numpy           数値計算の基礎（配列、行列）
  pandas          データ分析（表データ処理）
  matplotlib      グラフ描画
  scipy           科学技術計算
  scikit-learn    機械学習

■ Web開発
  django          フルスタックWebフレームワーク
  flask           軽量Webフレームワーク
  fastapi         高速API開発

■ Webスクレイピング
  requests        HTTPリクエスト（簡単）
  beautifulsoup4  HTML/XML解析
  selenium        ブラウザ自動操作
  scrapy          本格的スクレイピングフレームワーク

■ データベース
  sqlalchemy      SQLツールキット
  pymongo         MongoDB用
  psycopg2        PostgreSQL用

■ 開発支援
  pytest          テストフレームワーク
  black           コードフォーマッター
  flake8          コード品質チェック
  mypy            型チェック

■ その他便利ツール
  pillow          画像処理
  openpyxl        Excelファイル操作
  python-dotenv   環境変数管理
  rich            リッチなターミナル出力
"""

print(popular_packages)

# ==========================================================
# 【5】仮想環境（venv）- 超重要！
# ==========================================================

print("\n" + "=" * 70)
print("【5】仮想環境（venv）- プロジェクトごとに環境を分ける")
print("=" * 70)

venv_explanation = """
■ 仮想環境とは？
  プロジェクトごとに独立したPython環境を作る仕組み
  
■ なぜ必要？
  問題：プロジェクトAはDjango3.0、プロジェクトBはDjango4.0を使いたい
  　→ 同じPCに両方インストールすると衝突！
  
  解決：仮想環境で分ける
  　→ プロジェクトごとに専用の環境を作る

■ 仮想環境の作成と使用：
-----------------------------------------------------------
# 1. 仮想環境を作成（最初の1回だけ）
python -m venv myenv

# フォルダ構成：
myenv/
├── Scripts/         # Windows
│   └── activate     # 仮想環境を有効化するスクリプト
├── bin/             # Mac/Linux
│   └── activate
└── Lib/             # パッケージがここに入る

# 2. 仮想環境を有効化
# Windows:
myenv\\Scripts\\activate

# Mac/Linux:
source myenv/bin/activate

# 3. 有効化されると、プロンプトに (myenv) が表示される
(myenv) C:\\Users\\...>

# 4. この状態でpip install すると、myenv内にだけインストールされる
(myenv) pip install requests

# 5. 仮想環境を終了
deactivate
-----------------------------------------------------------

■ VSCodeでの仮想環境設定：
  1. Ctrl + Shift + P → "Python: Select Interpreter"
  2. 作成した仮想環境を選択
  3. VSCodeが自動的に仮想環境を使うようになる
"""

print(venv_explanation)

# ==========================================================
# 【6】実践的なワークフロー
# ==========================================================

print("\n" + "=" * 70)
print("【6】実践的な開発ワークフロー")
print("=" * 70)

workflow = """
■ 新しいプロジェクトを始める時：
-----------------------------------------------------------
# 1. プロジェクトフォルダを作成
mkdir my_project
cd my_project

# 2. 仮想環境を作成
python -m venv venv

# 3. 仮想環境を有効化
venv\\Scripts\\activate  # Windows
source venv/bin/activate  # Mac/Linux

# 4. 必要なパッケージをインストール
pip install requests pandas matplotlib

# 5. requirements.txt を作成（忘れずに！）
pip freeze > requirements.txt

# 6. Gitにコミット（venvフォルダは除外）
# .gitignore に以下を追加：
venv/
__pycache__/
*.pyc
-----------------------------------------------------------

■ 他の人のプロジェクトを動かす時：
-----------------------------------------------------------
# 1. リポジトリをクローン
git clone https://github.com/someone/project.git
cd project

# 2. 仮想環境を作成
python -m venv venv

# 3. 仮想環境を有効化
venv\\Scripts\\activate

# 4. requirements.txtからインストール
pip install -r requirements.txt

# 5. プログラムを実行
python main.py
-----------------------------------------------------------
"""

print(workflow)

# ==========================================================
# 【7】トラブルシューティング
# ==========================================================

print("\n" + "=" * 70)
print("【7】よくあるトラブルと解決方法")
print("=" * 70)

troubleshooting = """
■ エラー1: 'pip' は、内部コマンドまたは外部コマンド...
  原因：pipがPATHに登録されていない
  解決：python -m pip install パッケージ名

■ エラー2: Permission denied（権限エラー）
  原因：管理者権限が必要
  解決1：--user オプションを使う
    pip install --user requests
  解決2：仮想環境を使う（推奨）

■ エラー3: パッケージが見つからない（No module named 'xxx'）
  原因1：パッケージがインストールされていない
    → pip install xxx
  原因2：違うPython環境で実行している
    → 仮想環境を確認
  原因3：VSCodeが違うインタープリタを使っている
    → Ctrl + Shift + P → "Python: Select Interpreter"

■ エラー4: バージョンが競合する
  原因：依存関係の問題
  解決：requirements.txtでバージョンを固定

■ エラー5: pipが古い
  警告：WARNING: You are using pip version...
  解決：pip install --upgrade pip

■ エラー6: SSLエラー
  原因：証明書の問題
  解決：pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org パッケージ名
"""

print(troubleshooting)

# ==========================================================
# 【8】実際に使えるサンプルコード
# ==========================================================

print("\n" + "=" * 70)
print("【8】パッケージ管理ヘルパー関数")
print("=" * 70)

# パッケージがインストールされているかチェックする関数
def check_package(package_name):
    """
    パッケージがインストールされているか確認
    Args:
        package_name: チェックするパッケージ名
    Returns:
        True/False
    """
    try:
        importlib.import_module(package_name)  # インポートを試みる
        return True  # 成功したらTrue
    except ImportError:  # インポート失敗
        return False  # Falseを返す

# パッケージのバージョンを取得する関数
def get_package_version(package_name):
    """
    パッケージのバージョンを取得
    Args:
        package_name: パッケージ名
    Returns:
        バージョン文字列、または None
    """
    try:
        module = importlib.import_module(package_name)  # モジュールをインポート
        # __version__ 属性があれば返す
        return getattr(module, '__version__', 'バージョン情報なし')
    except ImportError:
        return None  # インストールされていない

# パッケージを自動インストールする関数（注意：本番では非推奨）
def auto_install(package_name):
    """
    パッケージが無ければ自動インストール（開発用）
    注意：本番環境では使わない！
    """
    if not check_package(package_name):  # インストールされていない場合
        print(f"{package_name} がインストールされていません。インストール中...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])
        print(f"{package_name} のインストールが完了しました")
    else:
        print(f"{package_name} はすでにインストールされています")

# 実際に使ってみる
print("\n【パッケージチェック例】")

# よく使うパッケージをチェック
test_packages = ['sys', 'os', 'json', 'datetime', 'math']  # 標準ライブラリ

for package in test_packages:
    is_installed = check_package(package)  # チェック実行
    status = "✅ インストール済み" if is_installed else "❌ 未インストール"
    print(f"  {package:15s} : {status}")

# ==========================================================
# 【9】まとめ
# ==========================================================

print("\n" + "=" * 70)
print("【まとめ】pipマスターへの道")
print("=" * 70)

summary = """
✅ 基本コマンドを覚える
   pip install パッケージ名         # インストール
   pip list                        # 一覧
   pip show パッケージ名            # 詳細
   pip uninstall パッケージ名       # 削除

✅ requirements.txt を必ず使う
   pip freeze > requirements.txt   # 作成
   pip install -r requirements.txt # インストール

✅ 仮想環境（venv）を使う
   python -m venv venv             # 作成
   venv\\Scripts\\activate          # 有効化（Windows）
   source venv/bin/activate        # 有効化（Mac/Linux）

✅ プロジェクトごとに環境を分ける
   - パッケージの衝突を防ぐ
   - チーム開発をスムーズにする
   - 本番環境への移行が楽

✅ よく使うパッケージを知る
   - 目的に応じて適切なパッケージを選ぶ
   - 公式ドキュメントを読む習慣をつける
"""

print(summary)

print("\n" + "=" * 70)
print("これでpipマスター！実際にいろんなパッケージを試してみよう！")
print("=" * 70)

pipについて、実践的なガイドを作成しました！

## 🎯 pipを超シンプルに言うと

**pip = Pythonのパッケージをインストールする「アプリストア」みたいなもの！**

## 📦 よく使うコマンド TOP 5

```bash
# 1. パッケージをインストール
pip install requests

# 2. インストール済み一覧を見る
pip list

# 3. パッケージをアンインストール
pip uninstall requests

# 4. 必要なパッケージをまとめてインストール
pip install -r requirements.txt

# 5. 現在の環境を保存
pip freeze > requirements.txt
```

## 🔥 超重要な2つの概念

### 1️⃣ requirements.txt（必須！）
```
プロジェクトで使うパッケージのリスト

例：
requests==2.28.1
pandas==1.5.3
numpy==1.24.0

作り方：pip freeze > requirements.txt
使い方：pip install -r requirements.txt
```

### 2️⃣ 仮想環境（venv）（これも必須！）
```bash
# プロジェクトごとに専用のPython環境を作る

# 作成
python -m venv venv

# 有効化
venv\Scripts\activate     # Windows
source venv/bin/activate  # Mac/Linux

# この状態でpip installすると、このプロジェクト専用にインストールされる
```

## 🚀 実践的な流れ

```bash
# 新しいプロジェクト開始！
mkdir my_project
cd my_project

# 仮想環境を作る
python -m venv venv

# 仮想環境を有効化
venv\Scripts\activate

# パッケージをインストール
pip install requests pandas

# 保存（忘れずに！）
pip freeze > requirements.txt
```

## 💡 覚えるポイント

1. **pip** = パッケージをインストールするツール
2. **requirements.txt** = 必要なパッケージのリスト
3. **venv** = プロジェクトごとの専用環境

この3つを押さえれば完璧です！
