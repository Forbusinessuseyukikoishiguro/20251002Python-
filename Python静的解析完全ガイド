静的解析について、実践的なコードで説明しますね！

# ==========================================================
# Python静的解析完全ガイド - 新人エンジニア向け
# ==========================================================

"""
【静的解析とは？】

簡単に言うと：
  プログラムを実行せずに、コードを読んで問題を見つけること
  「コードの健康診断」みたいなもの

動的解析との違い：
  静的解析：コードを実行しない → 速い、安全
  動的解析：コードを実行する   → 実際の動作を確認

静的解析でチェックできること：
  ✅ 文法エラー
  ✅ コーディング規約違反
  ✅ 型の不一致
  ✅ セキュリティの脆弱性
  ✅ コードの複雑さ
  ✅ 未使用の変数・インポート
"""

# ==========================================================
# 【1】主要な静的解析ツール
# ==========================================================

print("=" * 70)
print("【1】Pythonの主要な静的解析ツール")
print("=" * 70)

tools_overview = """
■ Pylint（パイリント）
  最も有名で高機能な静的解析ツール
  インストール：pip install pylint
  実行：pylint ファイル名.py
  特徴：厳しい、詳細なレポート、スコア付き

■ Flake8（フレイクエイト）
  軽量で使いやすい静的解析ツール
  インストール：pip install flake8
  実行：flake8 ファイル名.py
  特徴：シンプル、速い、PEP 8準拠

■ mypy（マイパイ）
  型チェックに特化したツール
  インストール：pip install mypy
  実行：mypy ファイル名.py
  特徴：型ヒントを使った型チェック

■ Black（ブラック）
  自動コードフォーマッター
  インストール：pip install black
  実行：black ファイル名.py
  特徴：一貫したスタイルに自動整形

■ isort（アイソート）
  import文を自動整理
  インストール：pip install isort
  実行：isort ファイル名.py
  特徴：importを綺麗に並べ替え

■ Bandit（バンディット）
  セキュリティチェック
  インストール：pip install bandit
  実行：bandit ファイル名.py
  特徴：セキュリティ脆弱性を検出
"""

print(tools_overview)

# ==========================================================
# 【2】悪いコードの例（静的解析で検出される問題）
# ==========================================================

print("\n" + "=" * 70)
print("【2】悪いコードの例 - 静的解析が指摘する問題")
print("=" * 70)

# 以下は「悪い例」として意図的に問題のあるコードを書いています

def bad_code_examples():
    """静的解析ツールが指摘する問題のあるコード例"""
    
    # 問題1: 未使用の変数
    unused_variable = 100  # この変数は使われていない
    another_unused = "hello"  # これも使われていない
    
    # 問題2: 未使用のインポート
    import os  # このインポートは使われていない
    import sys  # これも使われていない
    
    # 問題3: 変数名が不適切（短すぎる、意味不明）
    x = 10  # xって何？
    y = 20  # yって何？
    a = x + y  # aって何の略？
    
    # 問題4: 行が長すぎる（PEP 8では79文字以内推奨）
    very_long_variable_name = "これは非常に長い文字列で、PEP 8のガイドラインである79文字を超えています。これは読みにくいコードの例です。"
    
    # 問題5: 空白が不適切
    result=x+y  # 演算子の前後にスペースがない
    list=[1,2,3,4,5]  # カンマの後にスペースがない
    
    # 問題6: 比較演算子の誤用
    if x == None:  # None との比較は is を使うべき
        pass
    
    # 問題7: 例外処理が広すぎる
    try:
        result = 10 / 0
    except:  # 具体的な例外を指定すべき
        pass
    
    # 問題8: グローバル変数の多用
    global global_var  # グローバル変数は避けるべき
    global_var = 100
    
    # 問題9: マジックナンバー（数値の意味が不明）
    if a > 86400:  # 86400って何？（実は1日の秒数）
        print("1日以上")
    
    # 問題10: 複雑すぎる関数
    if x > 0:
        if y > 0:
            if a > 0:
                if result > 0:
                    print("全て正の数")  # ネストが深すぎる

# この関数自体が問題だらけ（静的解析ツールが大量に警告を出す）

# ==========================================================
# 【3】良いコードの例（静的解析をパスする）
# ==========================================================

print("\n良いコードの例は次のセクションで説明します...")

def good_code_examples():
    """静的解析ツールが承認する良いコード例"""
    
    # 改善1: 意味のある変数名を使う
    user_age = 25  # 年齢だと分かる
    user_name = "田中太郎"  # 名前だと分かる
    total_price = 1000  # 合計金額だと分かる
    
    # 改善2: 定数を使う（マジックナンバーを避ける）
    SECONDS_PER_DAY = 86400  # 1日の秒数を定数として定義
    MAX_RETRY_COUNT = 3  # 最大リトライ回数
    
    if total_price > SECONDS_PER_DAY:  # 意味が明確
        print("1日以上の秒数です")
    
    # 改善3: 適切なスペース
    result = user_age + 10  # 演算子の前後にスペース
    numbers = [1, 2, 3, 4, 5]  # カンマの後にスペース
    
    # 改善4: None との比較は is を使う
    data = None
    if data is None:  # is を使う（正しい）
        print("データがありません")
    
    # 改善5: 具体的な例外を指定
    try:
        result = 10 / 0
    except ZeroDivisionError:  # 具体的な例外を指定
        print("ゼロ除算エラー")
    except ValueError as e:  # 複数の例外を個別に処理
        print(f"値エラー: {e}")
    
    # 改善6: 関数を分割（複雑さを減らす）
    def validate_positive(value):
        """値が正の数か検証"""
        return value > 0
    
    if validate_positive(user_age):  # シンプルで読みやすい
        print("年齢は正の数です")
    
    # 改善7: 型ヒントを使う
    def calculate_total(price: int, quantity: int) -> int:
        """
        合計金額を計算
        Args:
            price: 単価
            quantity: 数量
        Returns:
            合計金額
        """
        return price * quantity
    
    # 改善8: docstringを書く
    def process_user_data(user_id: str) -> dict:
        """
        ユーザーデータを処理する関数
        
        Args:
            user_id: ユーザーID
            
        Returns:
            処理されたユーザーデータの辞書
            
        Raises:
            ValueError: user_idが不正な場合
        """
        if not user_id:
            raise ValueError("user_idは必須です")
        
        # 処理内容...
        return {"id": user_id, "status": "processed"}
    
    return calculate_total(total_price, 2)

# ==========================================================
# 【4】型ヒント（Type Hints）- mypyで使う
# ==========================================================

print("\n" + "=" * 70)
print("【4】型ヒント - 型の安全性を高める")
print("=" * 70)

# 型ヒントの例
from typing import List, Dict, Optional, Union, Tuple

def calculate_average(numbers: List[float]) -> float:
    """
    数値のリストの平均を計算
    Args:
        numbers: 数値のリスト
    Returns:
        平均値
    """
    if not numbers:  # 空リストのチェック
        return 0.0
    return sum(numbers) / len(numbers)  # 合計を個数で割る

def get_user_info(user_id: int) -> Dict[str, Union[str, int]]:
    """
    ユーザー情報を取得
    Args:
        user_id: ユーザーID（整数）
    Returns:
        ユーザー情報の辞書（キーは文字列、値は文字列または整数）
    """
    return {
        "name": "山田太郎",  # 文字列
        "age": 30,  # 整数
        "email": "yamada@example.com"  # 文字列
    }

def find_user(user_id: int) -> Optional[Dict[str, str]]:
    """
    ユーザーを検索
    Args:
        user_id: ユーザーID
    Returns:
        ユーザーが見つかれば辞書、見つからなければNone
    """
    if user_id > 0:
        return {"name": "田中"}
    return None  # 見つからない場合

def process_data(data: Union[str, int, List[str]]) -> str:
    """
    複数の型を受け入れる関数
    Args:
        data: 文字列、整数、または文字列のリスト
    Returns:
        処理結果の文字列
    """
    if isinstance(data, str):  # 文字列の場合
        return data.upper()
    elif isinstance(data, int):  # 整数の場合
        return str(data)
    else:  # リストの場合
        return ", ".join(data)

def get_coordinates() -> Tuple[float, float]:
    """
    座標を返す（タプルで固定長）
    Returns:
        (x座標, y座標)のタプル
    """
    return (35.6895, 139.6917)  # 東京の緯度経度

# 型ヒントを使った実行例
print("\n【型ヒントの使用例】")
numbers = [1.5, 2.5, 3.5, 4.5]
print(f"平均値: {calculate_average(numbers)}")

user = get_user_info(123)
print(f"ユーザー情報: {user}")

coords = get_coordinates()
print(f"座標: 緯度={coords[0]}, 経度={coords[1]}")

# ==========================================================
# 【5】静的解析の設定ファイル
# ==========================================================

print("\n" + "=" * 70)
print("【5】静的解析ツールの設定ファイル")
print("=" * 70)

config_examples = """
■ .flake8 の例（プロジェクトのルートに配置）
-----------------------------------------------------------
[flake8]
max-line-length = 100        # 1行の最大文字数
exclude = .git,__pycache__   # チェック対象外のディレクトリ
ignore = E203,W503           # 無視するエラーコード
-----------------------------------------------------------

■ pyproject.toml の例（Black、isort、mypyの設定）
-----------------------------------------------------------
[tool.black]
line-length = 100            # 1行の最大文字数
target-version = ['py39']    # 対象Pythonバージョン

[tool.isort]
profile = "black"            # Blackと互換性のある設定
line_length = 100

[tool.mypy]
python_version = "3.9"
warn_return_any = true       # 戻り値の型チェック
warn_unused_configs = true
disallow_untyped_defs = false  # 型ヒントなし関数を許可
-----------------------------------------------------------

■ pylintrc の例（詳細設定）
-----------------------------------------------------------
[MASTER]
ignore=tests                 # テストディレクトリを無視

[MESSAGES CONTROL]
disable=
    C0111,  # missing-docstring
    C0103,  # invalid-name
    R0913   # too-many-arguments

[FORMAT]
max-line-length=100
-----------------------------------------------------------
"""

print(config_examples)

# ==========================================================
# 【6】実践的な使い方
# ==========================================================

print("\n" + "=" * 70)
print("【6】実践的な使い方 - 開発フロー")
print("=" * 70)

practical_usage = """
■ ステップ1: 静的解析ツールをインストール
-----------------------------------------------------------
pip install pylint flake8 mypy black isort
-----------------------------------------------------------

■ ステップ2: コードを書く
-----------------------------------------------------------
# my_program.py
def calculate_sum(a: int, b: int) -> int:
    return a + b
-----------------------------------------------------------

■ ステップ3: 静的解析を実行
-----------------------------------------------------------
# 文法・スタイルチェック
flake8 my_program.py

# 型チェック
mypy my_program.py

# より詳細なチェック
pylint my_program.py
-----------------------------------------------------------

■ ステップ4: 自動整形
-----------------------------------------------------------
# コードフォーマット
black my_program.py

# import文の整理
isort my_program.py
-----------------------------------------------------------

■ ステップ5: VSCodeでの設定（推奨）
-----------------------------------------------------------
1. 拡張機能をインストール：
   - Python (Microsoft)
   - Pylint
   - Flake8
   - Black Formatter

2. settings.json に追加：
{
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "black",
    "editor.formatOnSave": true,
    "python.linting.lintOnSave": true
}

3. 保存時に自動で：
   - コードが整形される
   - 静的解析が実行される
   - 問題が表示される
-----------------------------------------------------------
"""

print(practical_usage)

# ==========================================================
# 【7】まとめ
# ==========================================================

print("\n" + "=" * 70)
print("【まとめ】静的解析を習慣化しよう")
print("=" * 70)

summary = """
✅ 静的解析の目的
   - バグを早期発見
   - コード品質を向上
   - チーム全体のコードスタイル統一
   - リファクタリングの安全性向上

✅ 最低限使うべきツール
   1. flake8 or pylint  （文法・スタイルチェック）
   2. mypy             （型チェック）
   3. black            （自動フォーマット）

✅ ベストプラクティス
   - 毎回コミット前に実行
   - CI/CDパイプラインに組み込む
   - VSCodeの自動チェック機能を活用
   - チーム全体で同じ設定を使う

✅ エラーを恐れない
   - 最初は大量のエラーが出るのが普通
   - 一つずつ直していけばOK
   - 徐々にコードの質が上がる

✅ 実行コマンド早見表
   flake8 .             # プロジェクト全体をチェック
   mypy my_file.py      # 型チェック
   black .              # 全ファイルをフォーマット
   isort .              # 全ファイルのimportを整理
   pylint my_file.py    # 詳細なチェック
"""

print(summary)

print("\n" + "=" * 70)
print("静的解析を習慣にして、高品質なコードを書こう！")
print("=" * 70)

# ==========================================================
# 【8】デモ：このファイル自体を解析してみよう
# ==========================================================

print("\n" + "=" * 70)
print("【実践課題】")
print("=" * 70)

print("""
このファイルを保存したら、以下のコマンドを実行してみてください：

1. flake8 でチェック
   flake8 このファイル名.py

2. black でフォーマット
   black このファイル名.py

3. isort で import を整理
   isort このファイル名.py

4. mypy で型チェック
   mypy このファイル名.py

きっとたくさんの指摘が出るはずです！
それを一つずつ直していくのが、良いコードへの第一歩です。
""")

Python静的解析について、詳しいガイドを作成しました！

## 🎯 静的解析を超シンプルに言うと

**コードを実行せずに、文法やスタイルの問題を見つける「コードの健康診断」！**

## 🔧 必須ツール TOP 3

### 1️⃣ **Flake8** - 文法チェック
```bash
# インストール
pip install flake8

# 使い方
flake8 my_file.py

# 何をチェック？
- コードの書き方（スペース、改行など）
- 未使用の変数
- 複雑すぎるコード
```

### 2️⃣ **mypy** - 型チェック
```bash
# インストール
pip install mypy

# 使い方
mypy my_file.py

# 何をチェック？
- 型ヒントの正しさ
- 型の不一致
```

### 3️⃣ **Black** - 自動整形
```bash
# インストール
pip install black

# 使い方
black my_file.py

# 何をする？
- コードを自動で綺麗に整形
- スタイルを統一
```

## 📝 悪いコード vs 良いコード

### ❌ 悪い例
```python
# 変数名が意味不明
x = 10
y = 20

# スペースがない
result=x+y

# 未使用の変数
unused = 100

# Noneとの比較が間違い
if x == None:
    pass
```

### ✅ 良い例
```python
# 変数名が明確
user_age = 10
total_count = 20

# スペースがある
result = user_age + total_count

# Noneとの比較が正しい
if result is None:
    pass

# 型ヒント付き
def calculate(price: int, quantity: int) -> int:
    return price * quantity
```

## 🚀 VSCodeで自動化

**settings.json に追加：**
```json
{
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "black",
    "editor.formatOnSave": true
}
```

**これで保存時に自動で：**
- コードが整形される ✨
- エラーが表示される 🔍
- コードが綺麗になる 🎨

## 💡 覚えるポイント

1. **静的解析** = コードを実行せずにチェック
2. **Flake8** = 文法とスタイル
3. **mypy** = 型の正しさ
4. **Black** = 自動整形

最初は大量のエラーが出ますが、それが普通です！一つずつ直していけば、どんどんコードが綺麗になります 💪
