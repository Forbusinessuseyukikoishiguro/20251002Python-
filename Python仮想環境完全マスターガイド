# ==========================================================
# Python仮想環境完全マスターガイド - 新人エンジニア向け
# ==========================================================

"""
【仮想環境とは？】

簡単に言うと：
  プロジェクトごとに独立したPython環境を作る仕組み
  「自分専用のPythonの部屋」を作るイメージ

なぜ必要？
  問題：
    プロジェクトA → Django 3.2 が必要
    プロジェクトB → Django 4.2 が必要
    → 同じPCに両方インストールできない！衝突する！
  
  解決：
    仮想環境A → Django 3.2 をインストール
    仮想環境B → Django 4.2 をインストール
    → それぞれ独立しているから問題なし！

メリット：
  ✅ プロジェクトごとにパッケージを分離
  ✅ バージョン衝突を防ぐ
  ✅ 環境を簡単に再現できる
  ✅ システムのPythonを汚さない
  ✅ チーム開発がスムーズ
"""

# ==========================================================
# 【1】仮想環境なしの問題点
# ==========================================================

print("=" * 70)
print("【1】仮想環境なしの問題点")
print("=" * 70)

problem_without_venv = """
■ シナリオ：仮想環境を使わない場合

状況：
  あなたのPC（Pythonがグローバルにインストールされている）
  
プロジェクト開始：
  $ pip install django==3.2.0
  → システム全体にDjango 3.2がインストールされる
  
新しいプロジェクト開始：
  $ pip install django==4.2.0
  → Django 4.2に上書きされる！
  → 前のプロジェクトが動かなくなる！😱

他の問題：
  ❌ どのパッケージがどのプロジェクト用か分からない
  ❌ 不要なパッケージが溜まる
  ❌ チームメンバーと環境を揃えにくい
  ❌ 本番環境への移行が難しい
  ❌ システムのPythonを壊す可能性
"""

print(problem_without_venv)

# ==========================================================
# 【2】仮想環境ありの素晴らしさ
# ==========================================================

print("\n" + "=" * 70)
print("【2】仮想環境ありの素晴らしさ")
print("=" * 70)

benefits_with_venv = """
■ シナリオ：仮想環境を使う場合

プロジェクトA：
  project_a/
  ├── venv_a/          ← A専用の仮想環境
  │   └── Django 3.2
  └── main.py

プロジェクトB：
  project_b/
  ├── venv_b/          ← B専用の仮想環境
  │   └── Django 4.2
  └── app.py

結果：
  ✅ それぞれ独立した環境
  ✅ 衝突しない
  ✅ 同時に開発できる
  ✅ 環境を簡単に再現できる

イメージ：
  [あなたのPC]
    ├─ [部屋A: プロジェクトA専用]
    │   └─ Django 3.2の本棚
    │
    └─ [部屋B: プロジェクトB専用]
        └─ Django 4.2の本棚
  
  各部屋は完全に独立！
"""

print(benefits_with_venv)

# ==========================================================
# 【3】venv（標準）の使い方 - 最も基本的
# ==========================================================

print("\n" + "=" * 70)
print("【3】venv（標準ライブラリ）- 初心者におすすめ")
print("=" * 70)

venv_usage = """
■ venvとは？
  Python 3.3以降に標準で付属している仮想環境ツール
  追加インストール不要！すぐ使える！

■ 基本的な使い方：

-----------------------------------------------------------
# ステップ1: 仮想環境を作成（最初の1回だけ）
python -m venv myenv

# 実行すると作られるフォルダ構造：
myenv/
├── Scripts/          # Windows用のスクリプト
│   ├── activate.bat  # 有効化（Windows）
│   ├── python.exe    # この環境専用のPython
│   └── pip.exe       # この環境専用のpip
├── bin/              # Mac/Linux用のスクリプト
│   ├── activate      # 有効化（Mac/Linux）
│   ├── python        # この環境専用のPython
│   └── pip           # この環境専用のpip
├── Lib/              # インストールされるパッケージ
│   └── site-packages/
└── pyvenv.cfg        # 設定ファイル

-----------------------------------------------------------

# ステップ2: 仮想環境を有効化

【Windows】
myenv\\Scripts\\activate

【Mac / Linux】
source myenv/bin/activate

# 有効化されると、プロンプトに環境名が表示される：
(myenv) C:\\Users\\...>    ← これが表示されたら成功！

-----------------------------------------------------------

# ステップ3: パッケージをインストール（仮想環境内）
(myenv) $ pip install requests
(myenv) $ pip install pandas
(myenv) $ pip install django

# これらは myenv/ の中にだけインストールされる！
# システム全体には影響しない！

-----------------------------------------------------------

# ステップ4: Pythonプログラムを実行
(myenv) $ python my_script.py

# この時使われるのは myenv内のPythonとパッケージ

-----------------------------------------------------------

# ステップ5: 仮想環境を終了（作業が終わったら）
(myenv) $ deactivate

# プロンプトから (myenv) が消える
C:\\Users\\...>    ← 通常の状態に戻る

-----------------------------------------------------------
"""

print(venv_usage)

# ==========================================================
# 【4】実践的なワークフロー
# ==========================================================

print("\n" + "=" * 70)
print("【4】実践的なワークフロー - プロジェクトの始め方")
print("=" * 70)

workflow = """
■ 新しいプロジェクトを始める完全な手順：

-----------------------------------------------------------
# 1. プロジェクトフォルダを作成
mkdir my_web_app
cd my_web_app

# 2. 仮想環境を作成
python -m venv venv

# なぜ「venv」という名前？
# - 慣習的によく使われる名前
# - .gitignoreで除外しやすい
# - 他の人が見ても分かりやすい

# 3. 仮想環境を有効化
# Windows:
venv\\Scripts\\activate
# Mac/Linux:
source venv/bin/activate

# 4. 必要なパッケージをインストール
(venv) $ pip install flask
(venv) $ pip install requests
(venv) $ pip install sqlalchemy

# 5. requirements.txt を作成（超重要！）
(venv) $ pip freeze > requirements.txt

# requirements.txt の中身（自動生成される）：
Flask==2.3.0
requests==2.28.1
SQLAlchemy==2.0.0
... その他の依存パッケージ

# 6. .gitignore を作成（仮想環境はGitに入れない）
echo "venv/" > .gitignore
echo "__pycache__/" >> .gitignore
echo "*.pyc" >> .gitignore

# 7. Gitで管理
git init
git add .
git commit -m "Initial commit"

-----------------------------------------------------------

■ プロジェクトフォルダの最終的な構造：
my_web_app/
├── venv/                  # 仮想環境（Gitには入れない）
├── app.py                 # プログラム本体
├── requirements.txt       # 依存パッケージリスト（必須）
├── .gitignore            # Git除外設定
└── README.md             # プロジェクト説明

-----------------------------------------------------------
"""

print(workflow)

# ==========================================================
# 【5】他の人のプロジェクトを動かす方法
# ==========================================================

print("\n" + "=" * 70)
print("【5】他の人のプロジェクトを動かす方法")
print("=" * 70)

reproduce_env = """
■ GitHubからクローンしたプロジェクトを動かす手順：

-----------------------------------------------------------
# 1. リポジトリをクローン
git clone https://github.com/someone/awesome-project.git
cd awesome-project

# 2. 仮想環境を作成（自分のPC上に）
python -m venv venv

# 3. 仮想環境を有効化
# Windows:
venv\\Scripts\\activate
# Mac/Linux:
source venv/bin/activate

# 4. requirements.txt から一括インストール
(venv) $ pip install -r requirements.txt

# これで、プロジェクト作者と同じ環境が再現される！

# 5. プログラムを実行
(venv) $ python app.py

-----------------------------------------------------------

■ なぜこれだけで動くの？
  requirements.txt に全ての依存パッケージとバージョンが
  記載されているから！

  例：
  Flask==2.3.0
  requests==2.28.1
  
  → これらが自動でインストールされる
  → 作者と全く同じ環境ができる
  → エラーなく動く！
"""

print(reproduce_env)

# ==========================================================
# 【6】VSCodeでの仮想環境設定
# ==========================================================

print("\n" + "=" * 70)
print("【6】VSCodeで仮想環境を使う方法")
print("=" * 70)

vscode_setup = """
■ VSCodeで仮想環境を認識させる方法：

-----------------------------------------------------------
方法1: 自動認識（おすすめ）

1. プロジェクトフォルダをVSCodeで開く
   File → Open Folder → プロジェクトフォルダを選択

2. VSCodeが自動的に venv/ を検出
   右下に「Python 3.x.x ('venv')」と表示される

3. もし表示されない場合は手動選択：
   Ctrl + Shift + P → "Python: Select Interpreter"
   → "./venv/Scripts/python.exe" を選択（Windows）
   → "./venv/bin/python" を選択（Mac/Linux）

-----------------------------------------------------------

方法2: settings.json で設定

.vscode/settings.json を作成：

{
    "python.defaultInterpreterPath": "${workspaceFolder}/venv/Scripts/python.exe",
    "python.terminal.activateEnvironment": true
}

これで：
  ✅ VSCodeが自動的に仮想環境を使う
  ✅ ターミナルを開くと自動で有効化される
  ✅ デバッグ時も仮想環境のPythonを使う

-----------------------------------------------------------

確認方法：

VSCodeのターミナルを開くと...
(venv) PS C:\\Users\\...>  ← (venv)が表示されればOK！

表示されない場合：
  → "Python: Select Interpreter" で仮想環境を選び直す
"""

print(vscode_setup)

# ==========================================================
# 【7】よくあるトラブルと解決方法
# ==========================================================

print("\n" + "=" * 70)
print("【7】よくあるトラブルシューティング")
print("=" * 70)

troubleshooting = """
■ トラブル1: activate できない（Windows）

エラー：
  activate : このシステムではスクリプトの実行が無効になっているため...

原因：PowerShellの実行ポリシー

解決：
  # PowerShellを管理者として起動
  Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
  
  # または、別の方法：
  venv\\Scripts\\activate.bat  # .batを使う

-----------------------------------------------------------

■ トラブル2: 仮想環境が有効にならない

症状：
  activate を実行しても (venv) が表示されない

確認：
  # どのPythonを使っているか確認
  which python    # Mac/Linux
  where python    # Windows
  
  # 仮想環境内のpythonを指しているはずが、
  # システムのpythonを指している

解決：
  1. 一度 deactivate
  2. もう一度 activate
  3. パスが正しいか確認

-----------------------------------------------------------

■ トラブル3: ModuleNotFoundError

エラー：
  ModuleNotFoundError: No module named 'requests'

原因：
  仮想環境を有効化せずにプログラムを実行している

解決：
  1. 仮想環境を有効化
  2. pip install -r requirements.txt
  3. もう一度実行

-----------------------------------------------------------

■ トラブル4: requirements.txt が古い

症状：
  新しいパッケージをインストールしたのに、
  requirements.txt に反映されていない

解決：
  # requirements.txt を更新
  pip freeze > requirements.txt
  
  # 確認
  cat requirements.txt  # Mac/Linux
  type requirements.txt # Windows

-----------------------------------------------------------

■ トラブル5: 仮想環境を削除したい

方法：
  # 仮想環境を無効化
  deactivate
  
  # フォルダごと削除（Windows）
  rmdir /s venv
  
  # フォルダごと削除（Mac/Linux）
  rm -rf venv
  
  # 再作成
  python -m venv venv
"""

print(troubleshooting)

# ==========================================================
# 【8】便利なコマンド集
# ==========================================================

print("\n" + "=" * 70)
print("【8】便利なコマンド集 - チートシート")
print("=" * 70)

cheatsheet = """
■ 仮想環境の作成
  python -m venv venv              # 標準的な名前
  python -m venv .venv             # 隠しフォルダ風
  python -m venv env               # 短い名前

■ 有効化・無効化
  # Windows
  venv\\Scripts\\activate          # 有効化
  deactivate                      # 無効化
  
  # Mac/Linux
  source venv/bin/activate        # 有効化
  deactivate                      # 無効化

■ パッケージ管理
  pip list                        # インストール済み一覧
  pip freeze                      # バージョン付き一覧
  pip freeze > requirements.txt   # ファイルに保存
  pip install -r requirements.txt # ファイルから復元
  pip install --upgrade pip       # pipの更新

■ 環境の確認
  which python                    # Pythonのパス（Mac/Linux）
  where python                    # Pythonのパス（Windows）
  python --version                # Pythonバージョン
  pip --version                   # pipバージョン

■ 仮想環境の削除
  deactivate                      # まず無効化
  rm -rf venv                     # 削除（Mac/Linux）
  rmdir /s venv                   # 削除（Windows）
"""

print(cheatsheet)

# ==========================================================
# 【9】Pythonコード内での確認
# ==========================================================

print("\n" + "=" * 70)
print("【9】現在の環境をPythonコードで確認")
print("=" * 70)

# 実際に確認してみる
import sys
import os

print("\n【現在のPython環境情報】")
print(f"Pythonバージョン: {sys.version}")
print(f"実行ファイルのパス: {sys.executable}")
print(f"モジュール検索パス（最初の3つ）:")
for i, path in enumerate(sys.path[:3], 1):
    print(f"  {i}. {path}")

# 仮想環境内かどうか判定
def is_in_venv():
    """仮想環境内で実行されているか判定"""
    return (
        hasattr(sys, 'real_prefix') or  # 古いvirtualenv
        (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)  # venv
    )

print(f"\n仮想環境内で実行中？: {is_in_venv()}")

if is_in_venv():
    print("✅ 仮想環境が有効化されています")
else:
    print("❌ システムのPythonを使用しています")

# 環境変数を確認
virtual_env = os.environ.get('VIRTUAL_ENV')
if virtual_env:
    print(f"仮想環境のパス: {virtual_env}")

# ==========================================================
# 【10】まとめ
# ==========================================================

print("\n" + "=" * 70)
print("【まとめ】仮想環境マスターへの道")
print("=" * 70)

summary = """
✅ 仮想環境の3つのルール

  1. プロジェクトごとに必ず作る
     → python -m venv venv

  2. 作業前に必ず有効化する
     → venv\\Scripts\\activate (Windows)
     → source venv/bin/activate (Mac/Linux)

  3. requirements.txt を必ず作る
     → pip freeze > requirements.txt

✅ 忘れてはいけないこと

  - 仮想環境フォルダはGitに入れない（.gitignore）
  - requirements.txt はGitに入れる
  - チームメンバー全員が同じ手順で環境構築

✅ 黄金の開発フロー

  新プロジェクト開始：
    1. mkdir project → cd project
    2. python -m venv venv
    3. venv\\Scripts\\activate
    4. pip install パッケージ...
    5. pip freeze > requirements.txt
    6. git init して開発開始

  既存プロジェクト参加：
    1. git clone して cd
    2. python -m venv venv
    3. venv\\Scripts\\activate
    4. pip install -r requirements.txt
    5. 開発開始

✅ 最重要ポイント

  仮想環境 = プロジェクト専用のPython部屋
  パッケージの衝突を防ぎ、環境を再現可能にする
  プロフェッショナルなPython開発には必須！
"""

print(summary)

print("\n" + "=" * 70)
print("これであなたも仮想環境マスター！")
print("必ず仮想環境を使う習慣をつけよう！")
print("=" * 70)
