いいですね 👍
「Pythonのdocstringの書き方」で有名どころを押さえておくと、他人のコードを読んだり自分で書いたりするときにとても役立ちます。
Python では **docstring（ドキュメンテーション文字列）** のフォーマットとして、以下のスタイルがよく使われます。

---

# 📖 Pythonの代表的なdocstring記法

## 1. Googleスタイル（初心者向けに一番わかりやすい）

Googleが公開しているコーディング規約で有名な書き方。
**引数 (Args) と戻り値 (Returns)** を箇条書きにする。

```python
def add_numbers(a: int, b: int) -> int:
    """
    2つの数値を足し算する。

    Args:
        a (int): 1つ目の整数
        b (int): 2つ目の整数

    Returns:
        int: 計算結果（a + b）
    """
    return a + b
```

👉 初心者は **これだけ覚えればOK**。
シンプルで読みやすいのでチーム開発でもよく使われます。

---

## 2. NumPyスタイル（科学技術系ライブラリで有名）

NumPy, SciPy, Pandasなどで使われているスタイル。
表形式で **Parameters** と **Returns** を書く。

```python
def add_numbers(a: int, b: int) -> int:
    """
    2つの数値を足し算する。

    Parameters
    ----------
    a : int
        1つ目の整数
    b : int
        2つ目の整数

    Returns
    -------
    int
        計算結果（a + b）
    """
    return a + b
```

👉 理系研究やデータ分析系ではこのスタイルが圧倒的に多いです。
表形式だからドキュメント化（Sphinxとか）しやすいのもポイント。

---

## 3. reStructuredText (reST) スタイル（公式っぽいやつ）

Python公式ドキュメント（PEP 257, PEP 287）やSphinxでよく使われる。
引数に `:param:` を使うのが特徴。

```python
def add_numbers(a: int, b: int) -> int:
    """
    2つの数値を足し算する。

    :param a: 1つ目の整数
    :type a: int
    :param b: 2つ目の整数
    :type b: int
    :return: 計算結果（a + b）
    :rtype: int
    """
    return a + b
```

👉 初心者にはちょっと読みにくいけど、
Sphinxで自動ドキュメント生成したいときに強い。

---

## 4. Epytextスタイル（古め）

古いJavaのJavadoc風。
Pythonではあまり見なくなったけど、レガシーなコードに残っていることがある。

```python
def add_numbers(a: int, b: int) -> int:
    """
    2つの数値を足し算する。

    @param a: 1つ目の整数
    @type a: int
    @param b: 2つ目の整数
    @type b: int
    @return: 計算結果（a + b）
    @rtype: int
    """
    return a + b
```

---

# ✅ まとめ（先生からのおすすめ）

* **初心者 → Googleスタイル**（シンプルで一番わかりやすい）
* **データ分析系 → NumPyスタイル**（理系・研究分野で標準）
* **公式ドキュメント生成 → reSTスタイル**（Sphinxと相性良い）

---

💡 先生からのアドバイス：
まずは **Googleスタイル** で統一して慣れるのがおすすめです。
「人に見せるコード」を意識して docstring を書くと、Python力が一気に上がりますよ 🚀

---

いいですね！
Python先生として「docstring書く練習用チートシート」を作りましょう ✍️

---

# 📝 Docstring 書き方チートシート（Python版）

## 1. 基本の書き方（短い関数用）

関数の冒頭に **処理の目的** を1行で書く。

```python
def hello(name: str) -> str:
    """名前を受け取り、あいさつ文を返す。"""
    return f"Hello, {name}!"
```

👉 ワンライナーならこれで十分。

---

## 2. Googleスタイル（初心者におすすめ）

### 書き方テンプレ

```python
def 関数名(引数: 型) -> 戻り値の型:
    """
    処理の説明文（1〜2行）

    Args:
        引数名 (型): 説明
        引数名 (型): 説明

    Returns:
        戻り値の型: 説明
    """
```

### 書き換え例

```python
def add(a: int, b: int) -> int:
    """
    2つの整数を足し算する。

    Args:
        a (int): 1つ目の整数
        b (int): 2つ目の整数

    Returns:
        int: 計算結果（a + b）
    """
    return a + b
```

---

## 3. NumPyスタイル（科学技術系でよく使う）

### 書き方テンプレ

```python
def 関数名(引数: 型) -> 戻り値の型:
    """
    処理の説明文

    Parameters
    ----------
    引数名 : 型
        説明
    引数名 : 型
        説明

    Returns
    -------
    戻り値の型
        説明
    """
```

### 書き換え例

```python
def add(a: int, b: int) -> int:
    """
    2つの整数を足し算する。

    Parameters
    ----------
    a : int
        1つ目の整数
    b : int
        2つ目の整数

    Returns
    -------
    int
        計算結果（a + b）
    """
    return a + b
```

---

## 4. reSTスタイル（Sphinx用）

### 書き方テンプレ

```python
def 関数名(引数: 型) -> 戻り値の型:
    """
    処理の説明文

    :param 引数名: 説明
    :type 引数名: 型
    :return: 説明
    :rtype: 型
    """
```

### 書き換え例

```python
def add(a: int, b: int) -> int:
    """
    2つの整数を足し算する。

    :param a: 1つ目の整数
    :type a: int
    :param b: 2つ目の整数
    :type b: int
    :return: 計算結果（a + b）
    :rtype: int
    """
    return a + b
```

---

## 5. 書く練習方法

1. **docstringなしの関数**を用意

   ```python
   def multiply(x, y):
       return x * y
   ```

2. **Googleスタイルで書いてみる**

   ```python
   def multiply(x: int, y: int) -> int:
       """
       2つの数を掛け算する。

       Args:
           x (int): 1つ目の数
           y (int): 2つ目の数

       Returns:
           int: 掛け算の結果
       """
       return x * y
   ```

3. **NumPyスタイルに書き換えてみる**

   ```python
   def multiply(x: int, y: int) -> int:
       """
       2つの数を掛け算する。

       Parameters
       ----------
       x : int
           1つ目の数
       y : int
           2つ目の数

       Returns
       -------
       int
           掛け算の結果
       """
       return x * y
   ```

👉 こうやって **同じ関数をいろんなスタイルで書き換える練習** をすると、自然に覚えられますよ。

---

# ✅ まとめ

* **短い関数 → ワンライナーでOK**
* **初心者・チーム開発 → Googleスタイル**
* **データ分析系 → NumPyスタイル**
* **公式ドキュメント化 → reSTスタイル**

---

先生からの宿題 ✍️
次の関数に **Googleスタイルのdocstring** をつけてみましょう。

```python
def divide(a: int, b: int) -> float:
    return a / b
```


