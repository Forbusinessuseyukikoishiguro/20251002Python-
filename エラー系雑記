
# 真偽値の比較
if is_active:        # ✅ そのまま
if is_active == True:  # ❌ 冗長

# 空のチェック
if not my_list:      # ✅ シンプル
if len(my_list) == 0:  # ❌ 冗長
```

### 5️⃣ **docstring**

```python
def calculate(price: int, quantity: int) -> int:
    """合計金額を計算する
    
    Args:
        price: 単価
        quantity: 数量
    
    Returns:
        合計金額
    """
    return price * quantity
```

## 🎨 完璧なコードの例

```python
"""ユーザー管理モジュール"""

# 標準ライブラリ
import os
from datetime import datetime

# サードパーティ
import requests

# 自作モジュール
from my_module import helper


# 定数
MAX_USERS = 100
DEFAULT_TIMEOUT = 30


def get_user_name(user_id: int) -> str:
    """ユーザー名を取得する
    
    Args:
        user_id: ユーザーID
    
    Returns:
        ユーザー名
    """
    return "田中太郎"


class UserManager:
    """ユーザー管理クラス"""
    
    def __init__(self, name: str):
        """コンストラクタ"""
        self.name = name
        self._internal_id = 0
    
    def get_name(self) -> str:
        """名前を取得"""
        return self.name
```

## 🛠️ 自動チェックツール

```bash
# インストール
pip install black flake8 pylint isort mypy

# 使い方
black your_file.py     # 自動フォーマット
flake8 your_file.py    # スタイルチェック
pylint your_file.py    # 総合チェック
isort your_file.py     # import整理
mypy your_file.py      # 型チェック
```

## ⚙️ VSCode設定

```json
{
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.formatting.provider": "black",
    "editor.formatOnSave": true,
    "editor.rulers": [79]
}
```

## ✅ チェックリスト

```
□ 変数名は snake_case
□ クラス名は PascalCase
□ 定数は UPPER_SNAKE_CASE
□ 演算子の前後にスペース
□ カンマの後にスペース
□ インデントはスペース4つ
□ 1行は79文字以内
□ 関数間に空行2つ
□ インポートは標準→サードパーティ→自作
□ None比較は is を使う
□ docstringを書いている
□ blackで自動整形している
```

## 🎯 まとめ：5つの黄金ルール

```
1. snake_case & PascalCase
   変数・関数はsnake_case、クラスはPascalCase

2. スペースを適切に
   演算子とカンマの後にスペース

3. インポートは3グループ
   標準→サードパーティ→自作

4. blackを使う
   自動で整形、議論不要

5. docstringは必須
   関数には必ず説明を書く
```

これでPythonコーディング規約は完璧！`black`を使えば自動で整形できるので、まずは`pip install black`から始めましょう 🎉
## 🎯 エラーを無視する方法

```python
# ===== 1行だけ無視 =====
x = 1  # pylint: disable=invalid-name
long_line = "..."  # noqa: E501
import requests  # type: ignore

# ===== 複数のエラーを無視 =====
def func():  # pylint: disable=invalid-name,missing-docstring
    pass

# ===== 関数全体を無視 =====
# pylint: disable=missing-docstring
def my_function():
    pass

# ===== ファイル全体を無視 =====
# ファイルの先頭に
# pylint: skip-file

# ===== 特定の範囲だけ無視 =====
# pylint: disable=invalid-name
x = 1
y = 2
# pylint: enable=invalid-name
```

## ⚙️ VSCode完全設定

### settings.json

```json
{
    // Python インタープリタ
    "python.defaultInterpreterPath": "${workspaceFolder}/venv/Scripts/python.exe",
    
    // Linting有効化
    "python.linting.enabled": true,
    "python.linting.lintOnSave": true,
    
    // Pylint
    "python.linting.pylintEnabled": true,
    "python.linting.pylintArgs": [
        "--disable=C0111,C0103",
        "--max-line-length=100"
    ],
    
    // Flake8
    "python.linting.flake8Enabled": true,
    "python.linting.flake8Args": [
        "--max-line-length=100",
        "--ignore=E203,W503"
    ],
    
    // Mypy
    "python.linting.mypyEnabled": true,
    "python.linting.mypyArgs": [
        "--ignore-missing-imports"
    ],
    
    // Black（自動フォーマット）
    "python.formatting.provider": "black",
    "python.formatting.blackArgs": [
        "--line-length=100"
    ],
    "editor.formatOnSave": true,
    
    // Import整理
    "editor.codeActionsOnSave": {
        "source.organizeImports": true
    },
    
    // 視覚的ガイド
    "editor.rulers": [100],
    
    // 末尾の空白削除
    "files.trimTrailingWhitespace": true
}
```

## 📊 エラーコード一覧

### Pylint主要エラー

```
C0111  missing-docstring        docstringがない
C0103  invalid-name             変数名が規則違反
C0114  missing-module-docstring モジュールdocstringなし
C0115  missing-class-docstring  クラスdocstringなし
C0116  missing-function-docstring 関数docstringなし

R0913  too-many-arguments       引数が多すぎる
R0914  too-many-locals          ローカル変数が多い
R0915  too-many-statements      文が多すぎる

W0621  redefined-outer-name     外部変数を再定義
W0622  redefined-builtin        組み込み関数を再定義

E1101  no-member                属性が存在しない
```

### Flake8主要エラー

```
E101  indentation contains mixed spaces and tabs
E501  line too long
E402  module level import not at top of file

W503  line break before binary operator
W504  line break after binary operator

F401  imported but unused
F841  local variable is assigned to but never used
```

### Mypy主要エラー

```
error: Cannot find implementation or library stub
error: Incompatible return value type
error: Argument has incompatible type
error: Unsupported operand types
```

## 🔧 トラブルシューティングフロー

```
静的解析エラーが出た！
│
├─ Linterが動かない？
│  ├─ インストール確認: pip list
│  ├─ python -m pylint を試す
│  ├─ 仮想環境を確認
│  └─ VSCode設定を確認
│
├─ エラーが多すぎる？
│  ├─ 設定ファイル作成
│  │  └─ .pylintrc, .flake8
│  ├─ 重要なエラー(E,F)だけ修正
│  └─ 段階的に対応
│
├─ 設定が反映されない？
│  ├─ ファイルの場所確認
│  │  └─ プロジェクトルート
│  ├─ ファイル名確認
│  │  └─ .pylintrc（ドット付き）
│  └─ VSCodeを再起動
│
├─ 型エラー（mypy）？
│  ├─ 型スタブをインストール
│  │  └─ pip install types-XXX
│  ├─ ignore_missing_imports = true
│  └─ # type: ignore で無視
│
└─ 特定のエラーだけ無視したい？
   ├─ 1行: # pylint: disable=XXX
   ├─ 関数: # pylint: disable=XXX
   └─ ファイル: # pylint: skip-file
```

## 💡 実践的なワークフロー

### 新規プロジェクトの場合

```bash
# 1. プロジェクト作成
mkdir my_project
cd my_project

# 2. 仮想環境作成
python -m venv venv
venv\Scripts\activate  # Windows
source venv/bin/activate  # Mac/Linux

# 3. 静的解析ツールインストール
pip install pylint flake8 mypy black isort

# 4. 設定ファイル作成
# pyproject.toml を作成（推奨）
cat > pyproject.toml << 'EOF'
[tool.pylint.messages_control]
disable = ["C0111", "C0103"]

[tool.pylint.format]
max-line-length = 100

[tool.black]
line-length = 100

[tool.isort]
profile = "black"

[tool.mypy]
ignore_missing_imports = true
EOF

# 5. VSCode設定
mkdir .vscode
cat > .vscode/settings.json << 'EOF'
{
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.formatting.provider": "black",
    "editor.formatOnSave": true
}
EOF

# 6. .gitignore
cat > .gitignore << 'EOF'
venv/
__pycache__/
*.pyc
.mypy_cache/
.pytest_cache/
EOF
```

### 既存プロジェクトの場合

```bash
# 1. まず全体をチェック
pylint . > pylint_report.txt
flake8 . > flake8_report.txt

# 2. エラー数を確認
wc -l pylint_report.txt

# 3. 重要なエラーだけ確認
flake8 --select=E,F .

# 4. 設定ファイルで緩和
# .pylintrc を作成してdisable

# 5. 段階的に修正
# E（エラー）→ W（警告）→ C（規約）→ R（リファクタ）
```

## 🎓 よくある質問

### Q1: pylintのスコアが低すぎる

```
A: 初期状態では非常に厳しい。
   .pylintrc で緩和する。

目標スコア:
- 7.0/10  まずまず
- 8.0/10  良好
- 9.0/10  優秀
- 10.0/10 完璧（現実的ではない）
```

### Q2: blackとflake8が衝突する

```
A: blackに合わせる。

.flake8:
[flake8]
ignore = E203, W503  # blackと互換性
max-line-length = 100
```

### Q3: mypyが厳しすぎる

```
A: 段階的に有効化。

# 最初は緩く
[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = false

# 徐々に厳しく
disallow_untyped_defs = true
```

### Q4: どのツールを使うべき？

```
A: 最低限これだけ:
- pylint または flake8（コード品質）
- black（自動フォーマット）
- mypy（型チェック、optional）
```

### Q5: VSCodeで警告が消えない

```
A: 確認すべきこと:
1. 正しいインタープリタを選択
   Ctrl+Shift+P → Select Interpreter
2. 出力パネルでエラー確認
   表示 → 出力 → Python
3. VSCodeを再起動
4. キャッシュをクリア
   .mypy_cache/ を削除
```

## 📚 参考リンク

```
Pylint:   https://pylint.pycqa.org/
Flake8:   https://flake8.pycqa.org/
Mypy:     https://mypy.readthedocs.io/
Black:    https://black.readthedocs.io/
isort:    https://pycqa.github.io/isort/
PEP 8:    https://peps.python.org/pep-0008/
```

## ✅ チェックリスト

```
□ 静的解析ツールをインストールした
  pip install pylint flake8 mypy black isort

□ 設定ファイルを作成した
  .pylintrc または pyproject.toml

□ VSCodeの設定を追加した
  settings.json に linting設定

□ 正しいインタープリタを選択した
  Ctrl+Shift+P → Select Interpreter

□ 設定ファイルの場所が正しい
  プロジェクトルートに配置

□ VSCodeを再起動した
  設定変更後は必ず再起動

□ エラーの優先順位を決めた
  E（エラー）→ W（警告）→ C（規約）

□ 段階的に修正する計画がある
  一度に全部直さない
```

## 🎯 まとめ：5つの鉄則

```
1. python -m で実行
   → コマンドが認識されない時

2. 設定ファイルを作る
   → エラーが多すぎる時

3. VSCodeを再起動
   → 設定が反映されない時

4. 段階的に修正
   → E（エラー）から優先

5. 無視する勇気を持つ
   → 全部完璧にする必要はない
```

これでPython静的解析のトラブルは完全解決！`python -m pylint`と`.pylintrc`を覚えれば大抵のトラブルは解決できます 🎉
