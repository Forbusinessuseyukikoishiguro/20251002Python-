# 【新人エンジニア向け】Gitを基礎から丁寧に解説

プログラミングを始めたばかりの方、チーム開発が初めての方に向けて、Gitの基本から間違いやすいポイント、やり直し方法まで、できるだけ分かりやすく説明します。

---

## 📖 目次
1. [Gitとは何か？](#gitとは何か)
2. [なぜGitが必要なのか](#なぜgitが必要なのか)
3. [Gitの基本的な仕組み](#gitの基本的な仕組み)
4. [基本操作の流れ](#基本操作の流れ)
5. [コミットの作法](#コミットの作法)
6. [ブランチとは](#ブランチとは)
7. [プルリクエストの流れ](#プルリクエストの流れ)
8. [間違いやすいポイントと対処法](#間違いやすいポイントと対処法)
9. [やり直し方法まとめ](#やり直し方法まとめ)

---

## Gitとは何か？

**Git（ギット）** は、**バージョン管理システム**と呼ばれるツールです。

### 日常生活で例えると...

レポートや論文を書くとき、こんな経験はありませんか？

```
レポート_最終版.docx
レポート_最終版2.docx
レポート_本当に最終版.docx
レポート_最終版_修正後.docx
レポート_提出用.docx
```

ファイル名で管理すると、どれが最新か分からなくなってしまいますよね。

**Gitを使うと：**
- ファイル名を変えずに、変更履歴を全て記録できる
- いつでも過去の状態に戻れる
- 誰がいつ何を変更したか分かる
- 複数人で同時に作業しても、変更を統合できる

---

## なぜGitが必要なのか

### 個人開発でも便利
- **バックアップ**：作業内容を自動的に記録
- **実験的な変更**：失敗しても元に戻せるので安心
- **変更履歴の確認**：「あれ、昨日まで動いてたのに...」を防げる

### チーム開発では必須
- **同時並行作業**：複数人が同じコードを編集できる
- **レビュー文化**：お互いのコードを確認し合える
- **品質管理**：mainブランチには動作確認済みのコードだけを置く

---

## Gitの基本的な仕組み

### 3つのエリアを理解しよう

Gitには3つの重要なエリアがあります：

```
┌─────────────────────┐
│  作業ディレクトリ    │  ← あなたが実際にファイルを編集する場所
│  (Working Directory) │
└──────────┬──────────┘
           │ git add
           ↓
┌─────────────────────┐
│  ステージングエリア   │  ← コミット予定の変更を一時的に置く場所
│  (Staging Area)      │
└──────────┬──────────┘
           │ git commit
           ↓
┌─────────────────────┐
│   リポジトリ         │  ← 変更履歴が記録される場所
│   (Repository)       │
└─────────────────────┘
```

### それぞれの役割

**1. 作業ディレクトリ（Working Directory）**
- あなたが普段ファイルを編集する場所
- エディタで開いて直接変更できる

**2. ステージングエリア（Staging Area）**
- 「次のコミットに含めたい変更」を置いておく場所
- `git add` で変更を追加する
- 「写真撮影の準備」のようなもの

**3. リポジトリ（Repository）**
- `git commit` で確定した変更が記録される場所
- 「写真を撮ってアルバムに保存」するイメージ
- ここに記録されると、いつでも過去の状態に戻れる

---

## 基本操作の流れ

### 初めてGitを使う準備

```bash
# 自分の名前とメールアドレスを設定（最初に1回だけ）
git config --global user.name "山田太郎"
git config --global user.email "yamada@example.com"

# 設定を確認
git config --list
```

### 日常的な作業の流れ

**ステップ1：リポジトリの作成または取得**

```bash
# 新規プロジェクトの場合
git init

# 既存プロジェクトに参加する場合
git clone https://github.com/username/repository.git
```

**ステップ2：ファイルを編集**

普通にファイルを編集します。VSCodeやメモ帳で好きなように編集してOKです。

**ステップ3：変更を確認**

```bash
# どのファイルが変更されたか確認
git status

# 具体的な変更内容を確認
git diff
```

**ステップ4：ステージングエリアに追加**

```bash
# 特定のファイルを追加
git add index.html

# 複数のファイルを追加
git add index.html style.css

# 全ての変更を追加（よく使う）
git add .
```

💡 **ポイント**：`git add` は「このファイルをコミットに含めます」という宣言です。

**ステップ5：コミット（変更を記録）**

```bash
# コミットする
git commit -m "ホームページのタイトルを修正"
```

**ステップ6：リモートに送信（チーム開発の場合）**

```bash
# GitHubなどに送信
git push origin main
```

---

## コミットの作法

### 良いコミットメッセージの書き方

コミットメッセージは「未来の自分」や「チームメンバー」へのメッセージです。

#### ❌ 悪い例

```bash
git commit -m "修正"
git commit -m "色々変更"
git commit -m "バグ直した"
git commit -m "aaa"
```

これでは何をしたのか分かりません。

#### ✅ 良い例

```bash
git commit -m "ログイン画面のボタン色を青に変更"
git commit -m "ユーザー名の最大文字数を50文字に制限"
git commit -m "商品一覧ページの読み込み速度を改善"
git commit -m "バグ修正: パスワードが空でも送信できてしまう問題を解決"
```

### コミットメッセージのルール

1. **何をしたか明確に書く**
   - 「〜を追加」「〜を修正」「〜を削除」など

2. **1行目は50文字以内が目安**
   - 長い説明が必要なら2行目以降に書く

3. **プレフィックスを付けると分かりやすい**（チームで決める）
   ```
   feat: 新機能追加
   fix: バグ修正
   docs: ドキュメント修正
   style: コードフォーマット
   refactor: リファクタリング
   test: テスト追加
   ```

   例：
   ```bash
   git commit -m "feat: ユーザー検索機能を追加"
   git commit -m "fix: ログアウト後にセッションが残る問題を修正"
   ```

### コミットの粒度（どのくらいの頻度でコミットする？）

**原則：「1つの機能や修正につき1コミット」**

#### ✅ 良い例
```
コミット1: ログイン画面のHTMLを作成
コミット2: ログイン画面のCSSを作成
コミット3: ログイン処理のJavaScript実装
```

#### ❌ 悪い例
```
コミット1: ログイン機能、ユーザー登録機能、パスワード変更機能を全部実装
```

💡 **目安**：1〜2時間作業したらコミット、または1つの機能を作り終えたらコミット

---

## ブランチとは

### ブランチの概念

ブランチは「平行世界」のようなものです。

```
main（メインの世界）
  │
  ├─ feature/login-page（ログイン画面を作る世界）
  │
  └─ fix/button-bug（ボタンのバグを直す世界）
```

それぞれの世界で独立して作業でき、完成したら元の世界（main）に統合します。

### なぜブランチを使うのか？

1. **mainを壊さない**
   - 実験的な変更はブランチで行う
   - mainは常に動作する状態を保つ

2. **複数の作業を並行できる**
   - Aさんは新機能、Bさんはバグ修正を同時に進められる

3. **レビューしやすい**
   - 変更内容を分けることで確認しやすくなる

### ブランチの基本操作

```bash
# 今いるブランチを確認
git branch

# 新しいブランチを作成
git branch feature/user-profile

# ブランチを切り替え
git checkout feature/user-profile

# ブランチ作成と切り替えを同時に（よく使う）
git checkout -b feature/user-profile

# 作業後、mainに戻る
git checkout main

# ブランチをmainに統合
git merge feature/user-profile

# 不要なブランチを削除
git branch -d feature/user-profile
```

### ブランチ命名のベストプラクティス

```
feature/機能名   → 新機能追加
fix/問題名       → バグ修正
docs/内容       → ドキュメント更新
refactor/対象   → リファクタリング

例：
feature/shopping-cart
fix/login-error
docs/readme-update
```

---

## プルリクエストの流れ

### プルリクエスト（Pull Request、PR）とは？

「私の変更を確認して、mainブランチに統合してください」という依頼のことです。

### なぜプルリクエストが必要？

1. **コードレビュー**：他の人に確認してもらえる
2. **品質保持**：バグや問題を事前に発見
3. **知識共有**：チームメンバーが何をしているか分かる
4. **記録**：なぜその変更をしたか残る

### プルリクエストの作成手順

**ステップ1：機能ブランチで作業**

```bash
# ブランチ作成
git checkout -b feature/add-search

# ファイル編集
# （コードを書く）

# コミット
git add .
git commit -m "検索機能を追加"
```

**ステップ2：リモートにプッシュ**

```bash
# GitHubにブランチを送信
git push origin feature/add-search
```

**ステップ3：GitHubでプルリクエスト作成**

1. GitHubのリポジトリページを開く
2. 「Compare & pull request」ボタンをクリック
3. タイトルと説明を書く
4. レビュワーを指定
5. 「Create pull request」をクリック

### 良いプルリクエストの書き方

**タイトル**
```
【機能追加】商品検索機能を実装
```

**説明文（Description）**
```markdown
## 概要
商品名で検索できる機能を追加しました。

## 変更内容
- 検索ボックスのUIを追加
- 検索APIとの連携処理を実装
- 検索結果の表示処理を実装

## 確認方法
1. ローカル環境で `npm start` を実行
2. 画面右上の検索ボックスに「テスト」と入力
3. 「テスト」という文字を含む商品が表示されることを確認

## スクリーンショット
（画像を貼る）

## 関連Issue
Closes #123
```

### レビューを受けた後の対応

```bash
# レビューで指摘された箇所を修正

# コミット
git add .
git commit -m "レビュー指摘事項を修正"

# プッシュ（PRに自動的に反映される）
git push origin feature/add-search
```

---

## 間違いやすいポイントと対処法

### ❌ 間違い1：mainブランチで直接作業してしまう

**症状**
```bash
# mainブランチで作業してしまった
git branch
* main  ← このまま作業している
```

**対処法**
```bash
# 変更を保存（コミットはまだしない）
git stash

# 新しいブランチを作成して切り替え
git checkout -b feature/my-work

# 保存した変更を戻す
git stash pop

# これでブランチで作業できる
git add .
git commit -m "機能追加"
```

### ❌ 間違い2：間違ったファイルをaddしてしまった

**症状**
```bash
git add .
# あ、パスワードが入ったファイルも追加してしまった！
```

**対処法**
```bash
# まだコミットしていない場合
git reset HEAD パスワード.txt

# または全てのaddを取り消す
git reset HEAD

# もう一度必要なファイルだけadd
git add 必要なファイル.txt
```

### ❌ 間違い3：コミットメッセージを間違えた

**症状**
```bash
git commit -m "あああ"
# しまった！ちゃんとしたメッセージを書き忘れた
```

**対処法**
```bash
# 直前のコミットメッセージを修正
git commit --amend -m "正しいメッセージ: ログイン機能を追加"

# まだpushしていなければこれでOK
```

⚠️ **注意**：pushした後は修正しない方が無難です。

### ❌ 間違い4：間違ったブランチにコミットしてしまった

**症状**
```bash
# mainブランチでコミットしてしまった
git branch
* main
```

**対処法**
```bash
# 新しいブランチを作成（コミットも一緒に移動する）
git branch feature/my-work

# mainを1つ前の状態に戻す
git reset --hard HEAD^

# 新しいブランチに移動
git checkout feature/my-work

# これで正しいブランチにコミットが移動した
```

### ❌ 間違い5：最新の状態を取得せずに作業を始めた

**症状**
```bash
# 作業して、push しようとしたら...
git push
# error: リモートに新しい変更があります
```

**対処法**
```bash
# リモートの最新状態を取得
git pull origin main

# もしコンフリクトしたら、手動で解決してコミット
git add .
git commit -m "コンフリクト解決"

# 再度push
git push
```

💡 **予防策**：作業を始める前に必ず `git pull` する習慣をつける

### ❌ 間違い6：大量のファイルを一気にコミットしてしまった

**症状**
```bash
git add .
git commit -m "色々修正"
# 100個のファイルが変更されている...
```

**対処法（コミット前なら）**
```bash
# addを取り消す
git reset HEAD

# 関連するファイルごとにコミット
git add login.html login.css
git commit -m "ログイン画面のデザインを修正"

git add search.js
git commit -m "検索機能を追加"
```

**対処法（コミット後なら）**
```bash
# 最後のコミットを取り消す（変更は残る）
git reset --soft HEAD^

# もう一度、適切な単位でコミット
git add login.html login.css
git commit -m "ログイン画面のデザインを修正"
```

---

## やり直し方法まとめ

### 変更を取り消したい（まだaddしていない）

```bash
# 特定のファイルの変更を破棄
git checkout -- ファイル名

# 全ての変更を破棄（危険！）
git checkout -- .
```

### addを取り消したい（まだコミットしていない）

```bash
# 特定のファイルのaddを取り消し
git reset HEAD ファイル名

# 全てのaddを取り消し
git reset HEAD
```

### コミットを取り消したい（まだpushしていない）

```bash
# 1つ前のコミットを取り消す（変更は残る）
git reset --soft HEAD^

# 1つ前のコミットを完全に取り消す（変更も消える）
git reset --hard HEAD^

# 複数のコミットを取り消す
git reset --soft HEAD~3  # 3つ前まで戻る
```

### pushしたコミットを取り消したい

```bash
# 新しいコミットで打ち消す（安全な方法）
git revert HEAD

# 強制的に戻す（危険！チームに影響）
git reset --hard HEAD^
git push -f origin main  # 絶対に確認してから実行
```

⚠️ **重要**：他の人と共有しているブランチでは `reset --hard` や `push -f` は避けてください。

### 変更を一時的に退避したい

```bash
# 今の変更を一時保存
git stash

# 他のブランチで作業...

# 保存した変更を戻す
git stash pop

# 保存した変更の一覧
git stash list
```

### コンフリクトが発生した場合

```bash
# マージやpullでコンフリクトが発生
git pull origin main
# CONFLICT (content): Merge conflict in index.html

# VSCodeなどで該当ファイルを開く
# <<<<<<<、=======、>>>>>>> の部分を手動で修正

# 修正後
git add index.html
git commit -m "コンフリクトを解決"
```

---

## 🎓 まとめ：Gitを使う上での心得

### 1. 基本の流れを体で覚える

```bash
git pull          # 最新を取得
git checkout -b ブランチ名  # ブランチ作成
# （作業する）
git add .
git commit -m "メッセージ"
git push origin ブランチ名
# （GitHubでPR作成）
```

### 2. こまめにコミットする

- 1〜2時間おきが目安
- 「今日はここまで」という区切りで
- バックアップにもなる

### 3. 分からなくなったら確認する

```bash
git status    # 今の状態を確認
git log       # コミット履歴を確認
git branch    # 今のブランチを確認
```

### 4. 失敗を恐れない

- Gitはやり直しができる
- ローカルで色々試してみる
- pushする前なら何度でも修正できる

### 5. チームのルールに従う

- ブランチ命名規則
- コミットメッセージの書き方
- PRの出し方
- これらはチームによって違う

---

## 🚀 次のステップ

Gitの基本が分かったら、次はこれらに挑戦してみましょう：

1. **実際にGitHubでリポジトリを作って練習**
2. **PRを出してみる**（自分のリポジトリでもOK）
3. **コンフリクトをわざと起こして解決してみる**
4. **チームメンバーのコードレビューをしてみる**

最初は戸惑うことも多いですが、毎日使っていれば必ず慣れます。分からないことがあったら、遠慮せずに先輩に聞いてくださいね！

**頑張ってください！** 💪
