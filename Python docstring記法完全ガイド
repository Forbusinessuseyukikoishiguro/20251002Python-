docstringの有名な記法について、実践的なコードで説明しますね！

# ==========================================================
# Python docstring記法完全ガイド - 新人エンジニア向け
# ==========================================================

"""
【docstringとは？】

簡単に言うと：
  関数やクラスの説明を書くための「公式なコメント」
  ドキュメントとして自動生成できる

通常のコメントとの違い：
  # これは通常のコメント（ドキュメントにならない）
  '''これはdocstring（ドキュメントになる）'''

主要な記法スタイル：
  1. Google Style    - 最も人気、読みやすい
  2. NumPy Style     - 科学計算系で人気
  3. reStructuredText (Sphinx) - 歴史が長い、公式的
"""

# ==========================================================
# 【1】docstringの基本
# ==========================================================

print("=" * 70)
print("【1】docstringの基本 - なぜ必要？")
print("=" * 70)

# docstringの基本的な使い方
def simple_function():
    """これがdocstringです。関数の説明を書きます。"""
    pass

# docstringの確認方法
print("\n【docstringの確認方法】")
print(f"関数の説明: {simple_function.__doc__}")

# help()関数でも確認できる
print("\nhelp()での表示:")
help(simple_function)

# ==========================================================
# 【2】Google Style - 最もおすすめ！
# ==========================================================

print("\n" + "=" * 70)
print("【2】Google Style - 最も読みやすく人気")
print("=" * 70)

# Google Styleの完全な例
def calculate_price(price: int, quantity: int, discount: float = 0.0) -> float:
    """商品の合計金額を計算します。
    
    この関数は単価、数量、割引率から最終的な支払金額を計算します。
    割引率は0.0から1.0の範囲で指定します（0.1 = 10%割引）。
    
    Args:
        price (int): 商品の単価（円）
        quantity (int): 購入する数量
        discount (float, optional): 割引率（0.0-1.0）。デフォルトは0.0
    
    Returns:
        float: 割引適用後の合計金額（円）
    
    Raises:
        ValueError: 価格、数量が負の値の場合
        ValueError: 割引率が0.0-1.0の範囲外の場合
    
    Examples:
        >>> calculate_price(1000, 3)
        3000.0
        
        >>> calculate_price(1000, 3, 0.1)
        2700.0
        
        >>> calculate_price(1000, 3, 0.2)
        2400.0
    
    Note:
        割引は合計金額に対して適用されます。
        消費税は含まれていません。
    """
    # 入力値の検証
    if price < 0 or quantity < 0:
        raise ValueError("価格と数量は0以上である必要があります")
    
    if not 0.0 <= discount <= 1.0:
        raise ValueError("割引率は0.0から1.0の範囲で指定してください")
    
    # 合計金額を計算
    subtotal = price * quantity  # 小計
    total = subtotal * (1 - discount)  # 割引適用
    
    return total


# Google Styleのクラスの例
class BankAccount:
    """銀行口座を管理するクラス。
    
    このクラスは預金口座の基本的な操作（預金、引き出し、残高照会）を
    提供します。
    
    Attributes:
        account_number (str): 口座番号
        owner_name (str): 口座名義人
        balance (float): 現在の残高
    
    Examples:
        >>> account = BankAccount("123-456", "山田太郎")
        >>> account.deposit(10000)
        >>> account.get_balance()
        10000.0
    """
    
    def __init__(self, account_number: str, owner_name: str):
        """BankAccountクラスのコンストラクタ。
        
        Args:
            account_number (str): 口座番号
            owner_name (str): 口座名義人の氏名
        """
        self.account_number = account_number
        self.owner_name = owner_name
        self.balance = 0.0
    
    def deposit(self, amount: float) -> None:
        """口座に入金します。
        
        Args:
            amount (float): 入金額（円）
        
        Raises:
            ValueError: 入金額が0以下の場合
        """
        if amount <= 0:
            raise ValueError("入金額は正の数である必要があります")
        
        self.balance += amount
    
    def withdraw(self, amount: float) -> bool:
        """口座から出金します。
        
        Args:
            amount (float): 出金額（円）
        
        Returns:
            bool: 出金が成功した場合True、残高不足の場合False
        
        Raises:
            ValueError: 出金額が0以下の場合
        """
        if amount <= 0:
            raise ValueError("出金額は正の数である必要があります")
        
        if self.balance >= amount:
            self.balance -= amount
            return True
        else:
            return False
    
    def get_balance(self) -> float:
        """現在の残高を取得します。
        
        Returns:
            float: 現在の残高（円）
        """
        return self.balance


# ==========================================================
# 【3】NumPy Style - 科学計算系で人気
# ==========================================================

print("\n" + "=" * 70)
print("【3】NumPy Style - 科学計算コミュニティで人気")
print("=" * 70)

def calculate_statistics(data):
    """データの統計情報を計算します。
    
    配列内の数値データから平均値、中央値、標準偏差を計算します。
    
    Parameters
    ----------
    data : list of float or int
        統計計算の対象となる数値のリスト
        空のリストは許可されません
    
    Returns
    -------
    dict
        以下のキーを持つ辞書:
        - 'mean' : float
            平均値
        - 'median' : float
            中央値
        - 'std' : float
            標準偏差
    
    Raises
    ------
    ValueError
        データが空のリストの場合
    TypeError
        データに数値以外が含まれる場合
    
    See Also
    --------
    numpy.mean : NumPyの平均値計算
    numpy.median : NumPyの中央値計算
    
    Notes
    -----
    この実装は基本的な統計計算のみを行います。
    より高度な統計分析にはNumPyやSciPyの使用を推奨します。
    
    標準偏差の計算式:
    
    .. math:: \\sigma = \\sqrt{\\frac{1}{N}\\sum_{i=1}^{N}(x_i - \\mu)^2}
    
    Examples
    --------
    基本的な使用例:
    
    >>> data = [1, 2, 3, 4, 5]
    >>> stats = calculate_statistics(data)
    >>> stats['mean']
    3.0
    
    より複雑なデータ:
    
    >>> data = [10, 20, 30, 40, 50]
    >>> stats = calculate_statistics(data)
    >>> print(f"平均: {stats['mean']}")
    平均: 30.0
    """
    if not data:
        raise ValueError("データが空です")
    
    # 平均値の計算
    mean_value = sum(data) / len(data)
    
    # 中央値の計算
    sorted_data = sorted(data)
    n = len(sorted_data)
    if n % 2 == 0:
        median_value = (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2
    else:
        median_value = sorted_data[n//2]
    
    # 標準偏差の計算
    variance = sum((x - mean_value) ** 2 for x in data) / len(data)
    std_value = variance ** 0.5
    
    return {
        'mean': mean_value,
        'median': median_value,
        'std': std_value
    }


class DataProcessor:
    """データ処理を行うクラス。
    
    このクラスは様々なデータ処理操作を提供します。
    
    Parameters
    ----------
    name : str
        プロセッサの名前
    max_size : int, optional
        処理可能な最大データサイズ（デフォルト: 1000）
    
    Attributes
    ----------
    name : str
        プロセッサの名前
    max_size : int
        処理可能な最大データサイズ
    processed_count : int
        これまでに処理したデータの数
    
    Methods
    -------
    process(data)
        データを処理します
    reset()
        カウンターをリセットします
    
    Examples
    --------
    >>> processor = DataProcessor("MyProcessor")
    >>> processor.process([1, 2, 3])
    >>> processor.processed_count
    1
    """
    
    def __init__(self, name, max_size=1000):
        self.name = name
        self.max_size = max_size
        self.processed_count = 0
    
    def process(self, data):
        """データを処理します。
        
        Parameters
        ----------
        data : list
            処理するデータのリスト
        
        Returns
        -------
        list
            処理されたデータ
        
        Raises
        ------
        ValueError
            データサイズがmax_sizeを超える場合
        """
        if len(data) > self.max_size:
            raise ValueError(f"データサイズが上限{self.max_size}を超えています")
        
        self.processed_count += 1
        return [x * 2 for x in data]  # 例: 各要素を2倍にする


# ==========================================================
# 【4】reStructuredText (Sphinx) Style
# ==========================================================

print("\n" + "=" * 70)
print("【4】reStructuredText (Sphinx) Style - 伝統的")
print("=" * 70)

def create_user(username, email, age=None, is_admin=False):
    """ユーザーを作成します。
    
    新しいユーザーアカウントを作成し、データベースに登録します。
    
    :param username: ユーザー名（3文字以上）
    :type username: str
    :param email: メールアドレス
    :type email: str
    :param age: 年齢（オプション）
    :type age: int or None
    :param is_admin: 管理者権限の有無
    :type is_admin: bool
    :return: 作成されたユーザーのID
    :rtype: int
    :raises ValueError: ユーザー名が短すぎる場合
    :raises ValueError: メールアドレスが不正な場合
    
    .. note::
       ユーザー名は英数字とアンダースコアのみ使用可能です。
    
    .. warning::
       管理者権限を付与する際は慎重に確認してください。
    
    Example::
    
        >>> user_id = create_user("tanaka", "tanaka@example.com")
        >>> print(user_id)
        1
        
        >>> admin_id = create_user("admin", "admin@example.com", is_admin=True)
        >>> print(admin_id)
        2
    """
    if len(username) < 3:
        raise ValueError("ユーザー名は3文字以上である必要があります")
    
    if '@' not in email:
        raise ValueError("メールアドレスが不正です")
    
    # ユーザー作成の処理...
    user_id = 1  # 仮のID
    
    return user_id


# ==========================================================
# 【5】各スタイルの比較
# ==========================================================

print("\n" + "=" * 70)
print("【5】3つのスタイルの比較")
print("=" * 70)

comparison = """
■ Google Style
-----------------------------------------------------------
長所：
  ✅ 最も読みやすい
  ✅ シンプルで学習しやすい
  ✅ 現代的なプロジェクトで人気
  ✅ 初心者にもわかりやすい

短所：
  ❌ 数式の表現が苦手

おすすめ：
  → 一般的なWebアプリ、ツール開発

-----------------------------------------------------------

■ NumPy Style
-----------------------------------------------------------
長所：
  ✅ 科学技術計算で標準的
  ✅ 詳細な説明を書きやすい
  ✅ 数式を綺麗に書ける
  ✅ 大規模な関数のドキュメントに向いている

短所：
  ❌ 少し冗長
  ❌ 記号が多い

おすすめ：
  → データサイエンス、機械学習、科学計算

-----------------------------------------------------------

■ reStructuredText (Sphinx) Style
-----------------------------------------------------------
長所：
  ✅ 歴史が長く、成熟している
  ✅ Sphinxで自動ドキュメント生成が容易
  ✅ 複雑なドキュメントに対応

短所：
  ❌ 記法が複雑
  ❌ 読みにくい（特に初心者）
  ❌ 書くのに時間がかかる

おすすめ：
  → Pythonの公式ライブラリ、大規模プロジェクト

-----------------------------------------------------------

■ 初心者へのおすすめ
  → Google Style を使いましょう！
  
  理由：
    - 最も読みやすい
    - 業界で広く使われている
    - VSCodeなどのエディタでサポートが良い
"""

print(comparison)

# ==========================================================
# 【6】実践的なテクニック
# ==========================================================

print("\n" + "=" * 70)
print("【6】実践的なdocstringテクニック")
print("=" * 70)

# テクニック1: 型ヒントと組み合わせる（推奨）
from typing import List, Dict, Optional, Union

def search_users(
    query: str,
    filters: Optional[Dict[str, str]] = None,
    limit: int = 10
) -> List[Dict[str, Union[str, int]]]:
    """ユーザーを検索します。
    
    型ヒントと組み合わせることで、より明確なドキュメントになります。
    
    Args:
        query: 検索キーワード
        filters: 検索フィルター（例: {"age": "30", "city": "Tokyo"}）
        limit: 取得する最大件数
    
    Returns:
        ユーザー情報の辞書のリスト
    """
    # 実装...
    return [{"name": "田中", "age": 30}]


# テクニック2: モジュールレベルのdocstring
"""
このモジュールはdocstringの記法を説明します。

Python には主に3つのdocstring記法があります：
  1. Google Style
  2. NumPy Style  
  3. reStructuredText (Sphinx) Style

Author: 新人エンジニア
Date: 2025-10-02
Version: 1.0.0
"""


# テクニック3: 簡潔なdocstring（短い関数の場合）
def add(a: int, b: int) -> int:
    """2つの数値を加算します。"""
    return a + b


# テクニック4: TODOやNOTEを含める
def complex_calculation(data: List[float]) -> float:
    """複雑な計算を実行します。
    
    Args:
        data: 計算対象のデータ
    
    Returns:
        計算結果
    
    Note:
        現在の実装は基本的なアルゴリズムを使用しています。
        パフォーマンスに問題がある場合は最適化が必要です。
    
    Todo:
        * より効率的なアルゴリズムの実装
        * エッジケースの処理追加
        * テストケースの拡充
    
    Warning:
        大量のデータを処理する場合はメモリ使用量に注意してください。
    """
    return sum(data) / len(data)


# ==========================================================
# 【7】VSCodeでdocstringを自動生成
# ==========================================================

print("\n" + "=" * 70)
print("【7】VSCodeでdocstringを自動生成する方法")
print("=" * 70)

vscode_tips = """
■ 拡張機能のインストール
-----------------------------------------------------------
1. VSCodeで拡張機能を開く（Ctrl + Shift + X）
2. "autoDocstring" を検索
3. インストール

-----------------------------------------------------------

■ 使い方
-----------------------------------------------------------
1. 関数を定義する:

def calculate(price, tax):
    pass

2. 関数の直下で """ を入力してEnter

3. 自動的にdocstringの雛形が生成される:

def calculate(price, tax):
    """_summary_

    Args:
        price (_type_): _description_
        tax (_type_): _description_
    """
    pass

4. _summary_ などを埋めていく

-----------------------------------------------------------

■ 設定（Google Styleを使う場合）
-----------------------------------------------------------
settings.json に追加:

{
    "autoDocstring.docstringFormat": "google",
    "autoDocstring.startOnNewLine": false,
    "autoDocstring.includeExtendedSummary": true
}

これで Google Style のdocstringが自動生成されます！

-----------------------------------------------------------
"""

print(vscode_tips)

# ==========================================================
# 【8】まとめとベストプラクティス
# ==========================================================

print("\n" + "=" * 70)
print("【まとめ】docstringのベストプラクティス")
print("=" * 70)

best_practices = """
✅ 必ず書くべきもの
  1. 関数の目的（何をする関数か）
  2. 引数の説明
  3. 戻り値の説明
  4. 例外の説明（raiseする場合）

✅ 書くと良いもの
  - 使用例（Examples）
  - 注意事項（Note, Warning）
  - 関連する関数（See Also）

✅ スタイルの選び方
  初心者・一般的な開発：
    → Google Style（読みやすい）
  
  データサイエンス・科学計算：
    → NumPy Style（数式に強い）
  
  大規模・公式ライブラリ：
    → Sphinx Style（自動生成に強い）

✅ 型ヒントとの組み合わせ
  # 良い例
  def func(name: str, age: int) -> bool:
      \"\"\"ユーザーを登録します。
      
      Args:
          name: ユーザー名
          age: 年齢
      
      Returns:
          登録成功時True
      \"\"\"
      pass

✅ 短い関数でも最低限の説明を
  # 最低限これだけでもOK
  def add(a: int, b: int) -> int:
      \"\"\"2つの数値を加算します。\"\"\"
      return a + b

✅ コードレビューでチェックすること
  - docstringが存在するか
  - 引数と戻り値の説明があるか
  - 実際のコードと矛盾していないか
  - 使用例が動作するか

✅ ツールを活用
  - VSCode: autoDocstring拡張機能
  - Linter: pydocstyle, pylint
  - ドキュメント生成: Sphinx, pdoc
"""

print(best_practices)

print("\n" + "=" * 70)
print("これでdocstringマスター！")
print("Google Styleから始めて、習慣化しよう！")
print("=" * 70)

# 実際にdocstringを確認してみる
print("\n【実際のdocstringを確認】")
print("\n1. calculate_price関数のdocstring:")
print(calculate_price.__doc__)

print("\n2. BankAccountクラスのdocstring:")
print(BankAccount.__doc__)

docstringの記法について、とても詳しいガイドを作成しました！

## 🎯 docstringを超シンプルに言うと

**関数やクラスの「公式な説明書」を書く方法！**

## 📚 主要な3つのスタイル

### 1️⃣ **Google Style** ⭐ おすすめ！

```python
def calculate(price: int, quantity: int) -> float:
    """商品の合計金額を計算します。
    
    Args:
        price: 商品の単価
        quantity: 購入数量
    
    Returns:
        合計金額
    
    Examples:
        >>> calculate(100, 3)
        300.0
    """
    return price * quantity
```

**特徴：**
- ✅ 読みやすい
- ✅ シンプル
- ✅ 初心者向け
- ✅ **最も人気！**

### 2️⃣ **NumPy Style** - 科学計算向け

```python
def calculate(price, quantity):
    """商品の合計金額を計算します。
    
    Parameters
    ----------
    price : int
        商品の単価
    quantity : int
        購入数量
    
    Returns
    -------
    float
        合計金額
    """
    return price * quantity
```

**特徴：**
- ✅ 数式に強い
- ✅ 詳細に書ける
- ❌ 少し冗長

### 3️⃣ **Sphinx Style** - 伝統的

```python
def calculate(price, quantity):
    """商品の合計金額を計算します。
    
    :param price: 商品の単価
    :type price: int
    :param quantity: 購入数量
    :type quantity: int
    :return: 合計金額
    :rtype: float
    """
    return price * quantity
```

**特徴：**
- ✅ 歴史が長い
- ❌ 記号が多い
- ❌ 読みにくい

## 🎨 どれを選ぶ？

```
一般的な開発（Web、ツール）
  → Google Style 👍

データサイエンス、機械学習
  → NumPy Style

大規模プロジェクト、公式ライブラリ
  → Sphinx Style
```

## 🚀 VSCodeで自動生成

### ステップ1: 拡張機能インストール
1. Ctrl + Shift + X
2. "autoDocstring" で検索
3. インストール

### ステップ2: 使い方
```python
def add(a, b):
    """  ← ここで """ を入力してEnter
    
# 自動的に生成される！
def add(a, b):
    """_summary_

    Args:
        a (_type_): _description_
        b (_type_): _description_
    """
```

### ステップ3: Google Styleに設定
**settings.json に追加：**
```json
{
    "autoDocstring.docstringFormat": "google"
}
```

## 📝 最低限書くべきこと

```python
def calculate(price: int, quantity: int) -> int:
    """合計金額を計算します。          # ← 何をする？
    
    Args:
        price: 単価                    # ← 引数は何？
        quantity: 数量
    
    Returns:
        合計金額                       # ← 何を返す？
    """
    return price * quantity
```

## 💡 覚えるポイント

1. **Google Style** を使う（読みやすいから）
2. **必ず書く** - 関数の説明、引数、戻り値
3. **VSCodeで自動生成** - 楽できる
4. **型ヒントと組み合わせ** - より明確に

最初は面倒でも、docstringを書く習慣をつけると、後で自分もチームも助かります！🎉
