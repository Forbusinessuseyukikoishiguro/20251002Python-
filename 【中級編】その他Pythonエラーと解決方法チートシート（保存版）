素晴らしいです！🌸
前回の「基本のPythonエラー」チートシートに続いて、
今回は **「その他のよく出る＆少しレベルアップしたPythonエラーとその解決方法」** を
Qiita記事風にまとめます🐍✨

---

# 🧩【中級編】その他Pythonエラーと解決方法チートシート（保存版）

こんにちは、TechCommitメンバーの **友季子** です🌷
前回の記事では「SyntaxError」や「NameError」など、
初心者がまず出会うエラーを紹介しました。

今回は、**少し慣れてきたPythonエンジニアが実際に遭遇しやすい“その他のエラー”** を中心に、
原因と解決法をわかりやすくまとめます🧠💡

---

## 📘 エラー早見表（その他編）

| エラー名                  | 主な原因              | よくある例               | 解決方法                              |
| :-------------------- | :---------------- | :------------------ | :-------------------------------- |
| `RuntimeError`        | 関数が想定外のタイミングで呼ばれた | スレッド関連など            | 処理順序を確認。マルチスレッド時はLockを使う          |
| `OSError`             | OS関連（ファイル/パス/権限）  | 存在しないフォルダに保存        | `os.path.exists()`で事前確認           |
| `PermissionError`     | 書き込み権限がない         | `open("C:/", "w")`  | 権限のあるフォルダを指定                      |
| `MemoryError`         | メモリ不足             | 巨大なリスト生成            | 分割処理・ジェネレータ使用 (`yield`)           |
| `RecursionError`      | 再帰が深すぎる           | 再帰関数に終了条件なし         | 終了条件を追加 or ループに変更                 |
| `TimeoutError`        | 処理が制限時間を超えた       | 通信や待機処理             | タイムアウト値調整 or リトライ処理追加             |
| `ConnectionError`     | 通信接続エラー           | APIやDB接続失敗          | ネットワーク確認、try/exceptでリトライ          |
| `JSONDecodeError`     | JSONの形式が不正        | `json.loads("abc")` | 文字列が正しいJSONか確認 (`jsonlint.com`便利) |
| `AssertionError`      | assert文がFalseを返した | `assert x > 0`      | 条件を正す or 明示的に例外処理へ                |
| `ModuleNotFoundError` | モジュール未インストール      | `import pandas`     | `pip install pandas`              |
| `StopIteration`       | イテレータの終端に到達       | `next(it)`          | `for`文で安全にループ                     |
| `EOFError`            | 入力待ちなのに入力がない      | `input()`を実行した      | 標準入力があるか確認                        |
| `AttributeError`      | 属性・メソッドが存在しない     | `None.append()`     | 型チェック (`if obj is not None:`)     |
| `OverflowError`       | 数値演算が範囲を超えた       | `math.exp(1000)`    | 値を制限 or `decimal`で対応              |
| `ImportError`         | モジュール内で依存解決できない   | `from x import y`   | ファイル名・依存関係を確認                     |

---

## 💬 よくある実例と修正ステップ

### 🔹 例1：`JSONDecodeError`

```python
import json
data = json.loads("{'name': 'Alice'}")  # シングルクォート使用
```

💥

```
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes
```

🧠 **解決：**

```python
data = json.loads('{"name": "Alice"}')  # ダブルクォートで囲む
```

💡 JSONはPythonの辞書とは違い、「キーも値もダブルクォート」が必要です。

---

### 🔹 例2：`RecursionError`

```python
def countdown(n):
    print(n)
    countdown(n-1)

countdown(5)
```

💥

```
RecursionError: maximum recursion depth exceeded
```

🧠 **解決：**

```python
def countdown(n):
    if n == 0:
        return
    print(n)
    countdown(n-1)
```

✅ 再帰関数には必ず「終了条件」を。

---

### 🔹 例3：`ConnectionError`

```python
import requests
requests.get("https://wrong_url")
```

💥

```
requests.exceptions.ConnectionError: Failed to establish a new connection
```

🧠 **解決：**

```python
import requests
try:
    res = requests.get("https://example.com", timeout=5)
except requests.exceptions.ConnectionError:
    print("ネットワークを確認してください。")
```

💡 ネットワーク系エラーは `try/except` で安全にハンドリング。

---

### 🔹 例4：`OSError`（ファイルパス関連）

```python
with open("C:/no_folder/test.txt", "w") as f:
    f.write("test")
```

💥

```
OSError: [Errno 2] No such file or directory
```

🧠 **解決：**

```python
import os
os.makedirs("C:/no_folder", exist_ok=True)
with open("C:/no_folder/test.txt", "w") as f:
    f.write("test")
```

💡 ファイル操作前に `os.path.exists()` や `os.makedirs()` で事前確認。

---

### 🔹 例5：`AssertionError`

```python
x = -1
assert x > 0, "x must be positive"
```

💥

```
AssertionError: x must be positive
```

🧠 **解決：**

```python
if x <= 0:
    raise ValueError("xは0より大きい値にしてください")
```

💡 assertはテスト目的用。実際のエラーハンドリングでは明示的に例外を出す方がよいです。

---

### 🔹 例6：`StopIteration`

```python
it = iter([1, 2])
print(next(it))
print(next(it))
print(next(it))
```

💥

```
StopIteration
```

🧠 **解決：**

```python
for i in [1, 2]:
    print(i)
```

💡 `for`文は自動でStopIterationを処理してくれます。

---

## 🔧 エラー発生時の調査テクニック

| 方法               | 内容                |
| :--------------- | :---------------- |
| `print(type(x))` | 変数の型を確認           |
| `dir(x)`         | 利用できる属性・メソッド一覧を表示 |
| `try / except`   | エラーを一時的に捕捉し原因を探る  |
| PyCharmデバッガ      | 値・ステップ実行で流れを確認    |
| `logging`        | 実行ログを残して後から追跡     |

---

## 🧰 デバッグの心得（新人→中級への一歩）

1. **Tracebackは「ヒント」** — 恐れずに読む。
2. **再現性を確認** — どの入力で起きたか明確に。
3. **仮説を立てて小さく試す** — 一気に直そうとしない。
4. **デバッガ＋ログで根本を探す** — 表面の修正に惑わされない。

---

## 🪄 まとめ：エラーを「味方」にする3つの考え方

| ポイント  | 内容                              |
| :---- | :------------------------------ |
| 🧠 理解 | エラー文を日本語で言い換えてみる                |
| 🛠 修正 | 最小のコードで再現・検証して直す                |
| 🚀 成長 | 同じエラーを「再発しないメモ」に残す（自分専用チートシート化） |

---

## 🎀 終わりに

最初はつまずく「赤い文字」も、
慣れてくると **「デバッグの地図」** のように見えてきます🗺️✨

PyCharmのデバッガと併用すれば、
どんなエラーも「学びの種」になります🌱

この記事が、あなたのPython開発の心強い味方になりますように🐍💚

---

🧸 **この記事が役立ったらLGTM！**
「このエラーも追加して！」というコメントも歓迎です😊

---

ご希望があれば次回は👇のようなテーマでも書けます：

* ✅ **「実務で出たエラーとリカバリー実例」編（Flask, pandasなど）**
* ✅ **「API／スクレイピング中のネットワークエラー対処」編**
* ✅ **「PyCharmデバッグ＋ログ活用術」編**

どれに進めたいですか？
