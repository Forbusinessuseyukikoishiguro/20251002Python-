





＃＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
おっ！いいですね😊
次は **PyCharm で flake8 / pylint を使う方法** を、新人エンジニア向けに **ステップバイステップ** で解説します。

> PyCharm は JetBrains が提供する IDE で、VSCode より「設定済み」が多く、Python プロジェクト用に強力なサポートがあります。
> ただし **flake8 / pylint は標準で入っていないので、自分で導入する必要** があります。

---

# 1. PyCharm での環境準備

1. **プロジェクトを作成／開く**

   * PyCharm 起動 → `File > New Project` または `Open`

2. **Python インタープリタの設定を確認**

   * メニュー `File > Settings` (Mac は `Preferences`)
   * 左メニューで `Project: your_project > Python Interpreter`
   * ここで「仮想環境（venv）」を選ぶ（まだない場合は `Add Interpreter` → Virtualenv を作成）

👉 VSCode と同じく **プロジェクトごとに仮想環境を作るのがおすすめ**です。

---

# 2. flake8 / pylint のインストール

仮想環境を有効にして、ターミナル（PyCharm 内蔵ターミナルでもOK）で次を実行：

```bash
python -m pip install --upgrade pip setuptools
python -m pip install flake8 pylint
```

* `python -m pip ...` を使うと、PyCharm が設定しているインタープリタに確実にインストールされます。
* PyCharm の **Interpreter 設定画面**でも `+` ボタンで追加インストール可能です。

---

# 3. flake8 の設定（外部ツールとして）

PyCharm は標準では flake8 を使いませんが、**External Tools（外部ツール）**として登録すると便利です。

### 設定方法

1. `File > Settings > Tools > External Tools` を開く
2. `+` で新規追加
3. 項目を入力：

   * **Name**: Flake8
   * **Program**: 仮想環境の flake8 実行ファイルのパス

     * mac/Linux: `.../your_project/.venv/bin/flake8`
     * Windows: `...\.venv\Scripts\flake8.exe`
   * **Arguments**: `$FilePathRelativeToProjectRoot$`
   * **Working directory**: `$ProjectFileDir$`

→ こうすると右クリックで「External Tools > Flake8」でファイルチェックできる。

---

# 4. pylint の設定（Inspection に統合できる）

PyCharm は **pylint を直接 Inspection に統合できる**ので、flake8 より扱いやすいです。

### 設定方法

1. `File > Settings > Languages & Frameworks > Python > Pylint`
2. 「Pylint path」に仮想環境内の pylint 実行ファイルを指定

   * mac/Linux: `.../your_project/.venv/bin/pylint`
   * Windows: `...\.venv\Scripts\pylint.exe`
3. 「Enable Pylint」をチェック
4. 「Arguments」に `--output-format=parseable` を入れると PyCharm がエラーを解釈しやすい

→ 保存すると、自動的にコードに赤線・警告が出ます。

---

# 5. 動作確認

* ファイルを保存すると pylint の警告が Problems パネルやコード上に表示されます。
* 外部ツールから flake8 を実行するとターミナルに結果が出ます。

---

# 6. よくあるトラブルと対処

### ❌ PyCharm が flake8 / pylint を見つけられない

* 原因：仮想環境にインストールしていない or PyCharm が別の Python を見ている
* 対策：

  1. `python -m pip show flake8` で確認
  2. PyCharm の Interpreter 設定で `.venv` を選ぶ

### ❌ pylint が厳しすぎてエラーだらけ

* 対策：`.pylintrc` ファイルを作成し、不要なルールを無効化

  ```bash
  pylint --generate-rcfile > .pylintrc
  ```

  → このファイルを編集して「disable=」にエラーコードを追加（例: C0114 = docstring なし）

### ❌ flake8 を毎回ターミナルで叩くのが面倒

* 対策：`File Watchers` プラグインを使って保存時に flake8 実行するよう自動化できる。

---

# 7. まとめ（PyCharm の特徴）

* **pylint** は PyCharm に組み込みやすく、保存時に自動でチェックしてくれる
* **flake8** は外部ツール登録か File Watchers で利用可能
* **仮想環境をインタープリタに設定するのが最重要**（VSCode と同じく）

---

# 参照（公式ドキュメント）

* PyCharm — [Code inspections and code quality tools](https://www.jetbrains.com/help/pycharm/code-quality-assistance.html)
* PyCharm — [Configure pylint](https://www.jetbrains.com/help/pycharm/pylint.html)
* flake8 — [flake8 official docs](https://flake8.pycqa.org/)
* pylint — [pylint official docs](https://pylint.readthedocs.io/)

---

👉 質問ですが、あなたは **PyCharm Community（無料版）** を使っていますか？ それとも **Professional（有料版）** ですか？
それによって flake8 の統合方法（外部ツール／プラグイン）が少し変わりますよ。

