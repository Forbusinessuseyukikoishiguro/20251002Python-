いいですね！😊
それでは、**「Python先生」**として、**「素人さん」**向けに、
データ（特にリストや変数）の扱い方・気を付けることを **MECE（漏れなくダブりなく）** 整理して解説しますね。

---

# 🐍 Python先生の授業：「データの扱い方」編

## 0. 前提

Python では **データ型**（int, str, list, dict など）ごとに「どう保存されるか・どう渡されるか（参照かコピーか）」が違います。
これを理解しておかないと「えっ？値が勝手に変わった！」というバグの温床になります。

---

# 1. データの基本分類（MECE）

| 分類                  | 例                      | 特徴       | 渡し方        |
| ------------------- | ---------------------- | -------- | ---------- |
| **イミュータブル（変更できない）** | int, float, str, tuple | 値を変えられない | 値渡しのような感覚  |
| **ミュータブル（変更できる）**   | list, dict, set        | 中身を変えられる | 参照渡しのような感覚 |

👉 **イミュータブル**は安全（勝手に変わらない）。
👉 **ミュータブル**は便利だけど注意が必要（参照が共有されやすい）。

---

# 2. リスト（list）の扱い方で気を付けること

## (A) **代入すると参照がコピーされる**

```python
a = [1, 2, 3]
b = a
b[0] = 99
print(a)  # [99, 2, 3]  ← a まで変わる！
```

👉 **リストは参照渡し**になるので、コピーしたつもりが同じ箱を見ている。

---

## (B) **コピーしたいなら明示的に**

```python
import copy

a = [1, 2, 3]
b = a[:]           # スライスコピー
c = list(a)        # コンストラクタコピー
d = copy.deepcopy(a)  # ネストしたリストまで安全にコピー
```

---

## (C) **関数に渡すときも注意**

```python
def add_item(lst):
    lst.append(999)

data = [1, 2, 3]
add_item(data)
print(data)  # [1, 2, 3, 999] ← 元のリストも変わる
```

👉 関数に渡すと「参照が渡る」ので、元のリストまで変わってしまう。

対策：

```python
def add_item(lst):
    new_lst = lst.copy()
    new_lst.append(999)
    return new_lst
```

---

# 3. データを扱うときの「気を付けるポイント」MECE

## (1) データ型の違い

* イミュータブル（int, str, tuple）は安全（コピーされるイメージ）
* ミュータブル（list, dict, set）は危険（参照されるイメージ）

## (2) コピーの仕方

* `=` は参照コピー
* `.copy()` や `list()`, スライス `[:]` は浅いコピー
* `copy.deepcopy()` はネスト構造まで完全コピー

## (3) 関数に渡すとき

* ミュータブルを渡すと **呼び出し元のデータが書き変わる**
* 必要ならコピーを作って返すようにする

## (4) チーム開発でのルール

* 共有データは **イミュータブルに寄せる**（予期せぬ変更防止）
* ミュータブルを使うときは「変更して良い場所・関数」を明確にする

---

# 4. 実務でよくある注意点

* **辞書(dict)も参照渡し**

  ```python
  a = {"x": 1}
  b = a
  b["x"] = 999
  print(a)  # {"x": 999}
  ```
* **リストのデフォルト引数は危険**

  ```python
  def f(x=[]):
      x.append(1)
      return x

  print(f())  # [1]
  print(f())  # [1, 1] ← 前回のリストを使い回す！
  ```

  → 解決法：

  ```python
  def f(x=None):
      if x is None:
          x = []
      x.append(1)
      return x
  ```

---

# 5. まとめ（ふわふわ大福流）

🐇「データは大福の箱と同じだよ。

* **イミュータブル**（変えられない大福） → 安全
* **ミュータブル**（中身を詰め替えられる大福箱） → 注意してシェア

コピーするときは、**箱ごとコピー**か、**中身ごと全部コピー**かを意識してね！」

---

👉 ここで質問です！
次に知りたいのは：

1. **dict（辞書型）の参照・コピー・注意点**
2. **実務でよく使う「データの安全な受け渡しパターン」**（例えば API の入力/出力での扱い）

どちらが良いですか？
