よっしゃ〜😊
次は「ふわふわ大福店のうさうさ店長」が、新人エンジニアさん向けに **⑬ 多重継承（複数のレシピを合体する技）** を **MECEで整理**して授業します！

---

# 🐰 うさうさ店長の授業：多重継承（複数のレシピを合体）

---

## 🔹 多重継承とは？

* **定義**：
  子クラスが **複数の親クラスを同時に継承**できる仕組み。
* **イメージ**：

  * 親A → 「大福の基本レシピ」
  * 親B → 「チョコのレシピ」
  * 子   → 「チョコ大福」

---

## 🔹 MECEで整理

1. **メリット**

   * 複数の機能をまとめて引き継げる
   * 共通処理を組み合わせて、新しいクラスを簡単に作れる

2. **デメリット（注意点）**

   * 親クラスが多いと「どの親を優先するか」が曖昧になりやすい
   * Pythonでは「MRO（メソッド解決順序）」で解決

3. **MRO（Method Resolution Order）**

   * 多重継承時に「メソッドを探す順番」を決めるルール
   * `クラス名.__mro__` または `クラス名.mro()` で確認できる

4. **使いどころ**

   * 共通の小さい機能をモジュール化して合体させたいとき
   * 例：ログ機能、保存機能、通知機能など

---

## 🔹 実例：ふわふわ大福店の多重継承

```python
# 親クラス1：大福の基本
class Daifuku:
    def introduce(self):
        print("私は大福です！")

# 親クラス2：チョコのレシピ
class Choco:
    def taste(self):
        print("チョコ風味です🍫")

# 子クラス：チョコ大福（大福＋チョコ）
class ChocoDaifuku(Daifuku, Choco):
    pass
```

---

## 🔹 実行例

```python
choco_d = ChocoDaifuku()
choco_d.introduce()  # Daifukuから継承
choco_d.taste()      # Chocoから継承

print(ChocoDaifuku.mro())  # MROを確認
```

---

## 🔹 実行結果

```
私は大福です！
チョコ風味です🍫
[<class '__main__.ChocoDaifuku'>, <class '__main__.Daifuku'>, <class '__main__.Choco'>, <class 'object'>]
```

👉 順番は **ChocoDaifuku → Daifuku → Choco → object**

---

## 🔹 複雑な例（オーバーライドの競合）

```python
class A:
    def show(self):
        print("Aのshow")

class B:
    def show(self):
        print("Bのshow")

# CはAとBを両方継承
class C(A, B):
    pass

c = C()
c.show()  # どっち？
print(C.mro())
```

---

## 🔹 実行結果（MROの働き）

```
Aのshow
[<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>]
```

👉 MROにより、`A.show()` が優先される。

---

## 🐇 まとめ（うさうさ店長の格言）

* **多重継承** = 「複数のレシピを合体」
* **MRO** = 「どのレシピを優先するかのルール」
* 実務では **シンプルな継承が基本**、多重継承は「小さい機能の組み合わせ」に使うと吉。

---

👉 次はどうしましょうか？

* ⑭ **特殊メソッド**（`__str__`, `__len__`, `__add__` など魔法メソッド）
* ⑮ **スレッド & プロセス入門**（並列処理の入口）

どちらに進みたいですか？
